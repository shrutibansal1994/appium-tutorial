'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _teen_process = require('teen_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _appiumSupport = require('appium-support');

var _helpersJs = require('../helpers.js');

var DEFAULT_PRIVATE_KEY = _path2['default'].resolve(_helpersJs.rootDir, 'keys', 'testkey.pk8');
var DEFAULT_CERTIFICATE = _path2['default'].resolve(_helpersJs.rootDir, 'keys', 'testkey.x509.pem');
var DEFAULT_CERT_DIGEST = 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc';

var apkSigningMethods = {};

/**
 * Applies the patch, which workarounds'-Djava.ext.dirs is not supported. Use -classpath instead.'
 * error on Windows by creating a temporary patched copy of the original apksigner script.
 *
 * @param {string} originalPath - The original path to apksigner tool
 * @returns {string} The full path to the patched script or the same path if there is
 *                   no need to patch the original file.
 */
function patchApksigner(originalPath) {
  var originalContent, patchedContent, patchedPath;
  return _regeneratorRuntime.async(function patchApksigner$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(originalPath, 'ascii'));

      case 2:
        originalContent = context$1$0.sent;
        patchedContent = originalContent.replace('-Djava.ext.dirs="%frameworkdir%"', '-cp "%frameworkdir%\\*"');

        if (!(patchedContent === originalContent)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', originalPath);

      case 6:
        _loggerJs2['default'].debug('Patching \'' + originalPath + '...');
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'apksigner', suffix: '.bat' }));

      case 9:
        patchedPath = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(patchedPath)));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(patchedPath, patchedContent, 'ascii'));

      case 14:
        return context$1$0.abrupt('return', patchedPath);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Execute apksigner utility with given arguments.
 *
 * @param {?Array<String>} args - The list of tool arguments.
 * @return {string} - Command stdout
 * @throws {Error} If apksigner binary is not present on the local file system
 *                 or the return code is not equal to zero.
 */
apkSigningMethods.executeApksigner = function callee$0$0() {
  var args = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var apkSigner, originalFolder, getApksignerOutput, _arr2, _i2, _arr2$_i2, _name2, stream, patchedApksigner;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _helpersJs.getApksignerForOs)(this));

      case 2:
        apkSigner = context$1$0.sent;
        originalFolder = _path2['default'].dirname(apkSigner);

        getApksignerOutput = function getApksignerOutput(apksignerPath) {
          var _ref, stdout, stderr, _arr, _i, _arr$_i, _name, stream;

          return _regeneratorRuntime.async(function getApksignerOutput$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)(apksignerPath, args, {
                  cwd: originalFolder
                }));

              case 2:
                _ref = context$2$0.sent;
                stdout = _ref.stdout;
                stderr = _ref.stderr;
                _arr = [['stdout', stdout], ['stderr', stderr]];

                for (_i = 0; _i < _arr.length; _i++) {
                  _arr$_i = _slicedToArray(_arr[_i], 2);
                  _name = _arr$_i[0];
                  stream = _arr$_i[1];

                  if (stream) {
                    _loggerJs2['default'].debug('apksigner ' + _name + ': ' + stream);
                  }
                }
                return context$2$0.abrupt('return', stdout);

              case 8:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        _loggerJs2['default'].debug('Starting \'' + apkSigner + '\' with args \'' + JSON.stringify(args) + '\'');
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(getApksignerOutput(apkSigner));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](6);

        _loggerJs2['default'].warn('Got an error during apksigner execution: ' + context$1$0.t0.message);
        _arr2 = [['stdout', context$1$0.t0.stdout], ['stderr', context$1$0.t0.stderr]];
        for (_i2 = 0; _i2 < _arr2.length; _i2++) {
          _arr2$_i2 = _slicedToArray(_arr2[_i2], 2);
          _name2 = _arr2$_i2[0];
          stream = _arr2$_i2[1];

          if (stream) {
            _loggerJs2['default'].warn('apksigner ' + _name2 + ': ' + stream);
          }
        }

        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 30;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(patchApksigner(apkSigner));

      case 20:
        patchedApksigner = context$1$0.sent;

        if (!(patchedApksigner !== apkSigner)) {
          context$1$0.next = 30;
          break;
        }

        context$1$0.prev = 22;
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(getApksignerOutput(patchedApksigner));

      case 25:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 26:
        context$1$0.prev = 26;
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(patchedApksigner));

      case 29:
        return context$1$0.finish(26);

      case 30:
        throw context$1$0.t0;

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 12], [22,, 26, 30]]);
};

/**
 * (Re)sign the given apk file on the local file system with the default certificate.
 *
 * @param {string} apk - The full path to the local apk file.
 * @throws {Error} If signing fails.
 */
apkSigningMethods.signWithDefaultCert = function callee$0$0(apk) {
  var args, java, signPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Signing \'' + apk + '\' with default cert');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        throw new Error(apk + ' file doesn\'t exist.');

      case 5:
        context$1$0.prev = 5;
        args = ['sign', '--key', DEFAULT_PRIVATE_KEY, '--cert', DEFAULT_CERTIFICATE, apk];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.executeApksigner(args));

      case 9:
        context$1$0.next = 25;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](5);

        _loggerJs2['default'].warn('Cannot use apksigner tool for signing. Defaulting to sign.jar. ' + ('Original error: ' + context$1$0.t0.message) + (context$1$0.t0.stderr ? '; StdErr: ' + context$1$0.t0.stderr : ''));
        java = (0, _helpersJs.getJavaForOs)();
        signPath = _path2['default'].resolve(this.helperJarPath, 'sign.jar');

        _loggerJs2['default'].debug("Resigning apk.");
        context$1$0.prev = 17;
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, ['-jar', signPath, apk, '--override']));

      case 20:
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t1 = context$1$0['catch'](17);
        throw new Error('Could not sign with default certificate. Original error ' + context$1$0.t1.message);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 11], [17, 22]]);
};

/**
 * (Re)sign the given apk file on the local file system with a custom certificate.
 *
 * @param {string} apk - The full path to the local apk file.
 * @throws {Error} If signing fails.
 */
apkSigningMethods.signWithCustomCert = function callee$0$0(apk) {
  var args, jarsigner;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Signing \'' + apk + '\' with custom cert');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.keystorePath));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Keystore: ' + this.keystorePath + ' doesn\'t exist.');

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 7:
        if (context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('\'' + apk + '\' doesn\'t exist.');

      case 9:
        context$1$0.prev = 9;
        args = ['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', 'pass:' + this.keystorePassword, '--key-pass', 'pass:' + this.keyPassword, apk];
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeApksigner(args));

      case 13:
        context$1$0.next = 31;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](9);

        _loggerJs2['default'].warn('Cannot use apksigner tool for signing. Defaulting to jarsigner. ' + ('Original error: ' + context$1$0.t0.message));
        context$1$0.prev = 18;

        _loggerJs2['default'].debug("Unsigning apk.");
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)((0, _helpersJs.getJavaForOs)(), ['-jar', _path2['default'].resolve(this.helperJarPath, 'unsign.jar'), apk]));

      case 22:
        _loggerJs2['default'].debug("Signing apk.");
        jarsigner = _path2['default'].resolve((0, _helpersJs.getJavaHome)(), 'bin', 'jarsigner' + (_appiumSupport.system.isWindows() ? '.exe' : ''));
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(jarsigner, ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias]));

      case 26:
        context$1$0.next = 31;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t1 = context$1$0['catch'](18);
        throw new Error('Could not sign with custom certificate. Original error ' + context$1$0.t1.message);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 15], [18, 28]]);
};

/**
 * (Re)sign the given apk file on the local file system with either
 * custom or default certificate based on _this.useKeystore_ property value
 * and Zip-aligns it after signing.
 *
 * @param {string} apk - The full path to the local apk file.
 * @throws {Error} If signing fails.
 */
apkSigningMethods.sign = function callee$0$0(apk) {
  var apksignerFound;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        apksignerFound = true;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _helpersJs.getApksignerForOs)(this));

      case 4:
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

        apksignerFound = false;

      case 9:
        if (!apksignerFound) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.zipAlignApk(apk));

      case 13:
        context$1$0.next = 17;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t1 = context$1$0['catch'](10);

      case 17:
        if (!this.useKeystore) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.signWithCustomCert(apk));

      case 20:
        context$1$0.next = 24;
        break;

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.signWithDefaultCert(apk));

      case 24:
        if (apksignerFound) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.zipAlignApk(apk));

      case 27:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6], [10, 15]]);
};

/**
 * Perform zip-aligning to the given local apk file.
 *
 * @param {string} apk - The full path to the local apk file.
 * @throws {Error} If zip-align fails.
 */
apkSigningMethods.zipAlignApk = function callee$0$0(apk) {
  var alignedApk;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Zip-aligning \'' + apk + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initZipAlign());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'appium', suffix: '.tmp' }));

      case 5:
        alignedApk = context$1$0.sent;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(alignedApk)));

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]));

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mv(alignedApk, apk, { mkdirp: true }));

      case 13:
        context$1$0.next = 23;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](8);
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(alignedApk));

      case 19:
        if (!context$1$0.sent) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(alignedApk));

      case 22:
        throw new Error('zipAlignApk failed. Original error: ' + context$1$0.t0.message + '. Stdout: \'' + context$1$0.t0.stdout + '\'; Stderr: \'' + context$1$0.t0.stderr + '\'');

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 15]]);
};

/**
 * Check if the app is already signed with the default Appium ceritficate.
 *
 * @param {string} apk - The full path to the local apk file.
 * @param {string} pgk - The name of application package.
 * @return {boolean} True if given application is already signed.
 */
apkSigningMethods.checkApkCert = function callee$0$0(apk, pkg) {
  var verificationFunc;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Checking app cert for ' + apk);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].debug('\'' + apk + '\' doesn\'t exist');
        return context$1$0.abrupt('return', false);

      case 6:
        if (!this.useKeystore) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.checkCustomApkCert(apk, pkg));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
        verificationFunc = undefined;
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _helpersJs.getApksignerForOs)(this));

      case 14:
        verificationFunc = function callee$1$0() {
          var output;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.executeApksigner(['verify', '--print-certs', apk]));

              case 2:
                output = context$2$0.sent;

                if (_lodash2['default'].includes(output, DEFAULT_CERT_DIGEST)) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('\'' + apk + '\' is signed with non-default certificate');

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        };
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](11);

        (function () {
          _loggerJs2['default'].warn('Cannot use apksigner tool for signature verification. Defaulting to verify.jar. ' + ('Original error: ' + context$1$0.t0.message));
          var java = (0, _helpersJs.getJavaForOs)();
          verificationFunc = function callee$3$0() {
            return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
              while (1) switch (context$4$0.prev = context$4$0.next) {
                case 0:
                  context$4$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, ['-jar', _path2['default'].resolve(this.helperJarPath, 'verify.jar'), apk]));

                case 2:
                  return context$4$0.abrupt('return', context$4$0.sent);

                case 3:
                case 'end':
                  return context$4$0.stop();
              }
            }, null, _this2);
          };
        })();

      case 20:
        context$1$0.prev = 20;
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(verificationFunc());

      case 23:
        _loggerJs2['default'].debug('\'' + apk + '\' is already signed.');
        return context$1$0.abrupt('return', true);

      case 27:
        context$1$0.prev = 27;
        context$1$0.t1 = context$1$0['catch'](20);

        _loggerJs2['default'].debug('\'' + apk + '\' is not signed with debug cert.');
        return context$1$0.abrupt('return', false);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 17], [20, 27]]);
};

/**
 * Check if the app is already signed with a custom certificate.
 *
 * @param {string} apk - The full path to the local apk file.
 * @param {string} pgk - The name of application package.
 * @return {boolean} True if given application is already signed with a custom certificate.
 */
apkSigningMethods.checkCustomApkCert = function callee$0$0(apk, pkg) {
  var h, md5Str, md5, javaHome, keytool, keystoreHash;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Checking custom app cert for ' + apk);
        h = "a-fA-F0-9";
        md5Str = ['.*MD5.*((?:[' + h + ']{2}:){15}[' + h + ']{2})'];
        md5 = new RegExp(md5Str, 'mi');
        javaHome = (0, _helpersJs.getJavaHome)();
        keytool = _path2['default'].resolve(javaHome, 'bin', 'keytool' + (_appiumSupport.system.isWindows() ? '.exe' : ''));
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getKeystoreMd5(keytool, md5));

      case 8:
        keystoreHash = context$1$0.sent;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.checkApkKeystoreMatch(keytool, md5, keystoreHash, pkg, apk));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the MD5 hash of the keystore.
 *
 * @param {string} keytool - The name of the keytool utility.
 * @param {RegExp} md5re - The pattern used to match the result in _keytool_ output.
 * @return {?string} Keystore MD5 hash or _null_ if the hash cannot be parsed.
 * @throws {Error} If getting keystore MD5 hash fails.
 */
apkSigningMethods.getKeystoreMd5 = function callee$0$0(keytool, md5re) {
  var _ref2, stdout, keystoreHash;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Printing keystore md5.");
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(keytool, ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword]));

      case 4:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        keystoreHash = md5re.exec(stdout);

        keystoreHash = keystoreHash ? keystoreHash[1] : null;
        _loggerJs2['default'].debug('Keystore MD5: ' + keystoreHash);
        return context$1$0.abrupt('return', keystoreHash);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('getKeystoreMd5 failed. Original error: ' + context$1$0.t0.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 12]]);
};

/**
 * Check if the MD5 hash of the particular application matches to the given hash.
 *
 * @param {string} keytool - The name of the keytool utility.
 * @param {RegExp} md5re - The pattern used to match the result in _keytool_ output.
 * @param {string} keystoreHash - The expected hash value.
 * @param {string} pkg - The name of the installed package.
 * @param {string} apk - The full path to the existing apk file.
 * @return {boolean} True if both hashes are equal.
 * @throws {Error} If getting keystore MD5 hash fails.
 */
apkSigningMethods.checkApkKeystoreMatch = function callee$0$0(keytool, md5re, keystoreHash, pkg, apk) {
  var entryHash, rsa, foundKeystoreMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        entryHash = null;
        rsa = /^META-INF\/.*\.[rR][sS][aA]$/;
        foundKeystoreMatch = false;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.readEntries(apk, function callee$1$0(_ref3) {
          var entry = _ref3.entry;
          var extractEntryTo = _ref3.extractEntryTo;

          var entryPath, entryFile, _ref4, stdout, matchesKeystore;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                entry = entry.fileName;

                if (rsa.test(entry)) {
                  context$2$0.next = 3;
                  break;
                }

                return context$2$0.abrupt('return');

              case 3:
                _loggerJs2['default'].debug('Entry: ' + entry);
                entryPath = _path2['default'].join(this.tmpDir, pkg, 'cert');

                _loggerJs2['default'].debug('entryPath: ' + entryPath);
                entryFile = _path2['default'].join(entryPath, entry);

                _loggerJs2['default'].debug('entryFile: ' + entryFile);
                // ensure /tmp/pkg/cert/ doesn't exist or extract will fail.
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(entryPath));

              case 10:
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(extractEntryTo(entryPath));

              case 12:
                _loggerJs2['default'].debug("extracted!");
                // check for match
                _loggerJs2['default'].debug("Printing apk md5.");
                context$2$0.next = 16;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)(keytool, ['-v', '-printcert', '-file', entryFile]));

              case 16:
                _ref4 = context$2$0.sent;
                stdout = _ref4.stdout;

                entryHash = md5re.exec(stdout);
                entryHash = entryHash ? entryHash[1] : null;
                _loggerJs2['default'].debug('entryHash MD5: ' + entryHash);
                _loggerJs2['default'].debug('keystore MD5: ' + keystoreHash);
                matchesKeystore = entryHash && entryHash === keystoreHash;

                _loggerJs2['default'].debug('Matches keystore? ' + matchesKeystore);

                // If we have a keystore match, stop iterating

                if (!matchesKeystore) {
                  context$2$0.next = 27;
                  break;
                }

                foundKeystoreMatch = true;
                return context$2$0.abrupt('return', false);

              case 27:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3);
        }));

      case 5:
        return context$1$0.abrupt('return', foundKeystoreMatch);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = apkSigningMethods;
module.exports = exports['default'];

// it is necessary to apply zipalign only before signing
// if apksigner is used or only after signing if we only have
// sign.jar utility

//for (let entry of entries) {
// META-INF/CERT.RSA
//# sourceMappingURL=data:application/json;charset=utf8;base64,
