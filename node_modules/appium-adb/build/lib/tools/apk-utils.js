'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersJs = require('../helpers.js');

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var apkUtilsMethods = {};

/**
 * Check whether the particular package is present on the device under test.
 *
 * @param {string} pkg - The name of the package to check.
 * @return {boolean} True if the package is installed.
 */
apkUtilsMethods.isAppInstalled = function callee$0$0(pkg) {
  var installed, stdout, apkInstalledRgx;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        installed = false;

        _loggerJs2['default'].debug('Getting install status for ' + pkg);
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'list', 'packages', pkg]));

      case 5:
        stdout = context$1$0.sent;
        apkInstalledRgx = new RegExp('^package:' + pkg.replace(/(\.)/g, "\\$1") + '$', 'm');

        installed = apkInstalledRgx.test(stdout);
        _loggerJs2['default'].debug('App is' + (!installed ? ' not' : '') + ' installed');
        return context$1$0.abrupt('return', installed);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](2);
        throw new Error('Error finding if app is installed. Original error: ' + context$1$0.t0.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 12]]);
};

/**
 * Start the particular URI on the device under test.
 *
 * @param {string} uri - The name of URI to start.
 * @param {string} pkg - The name of the package to start the URI with.
 */
apkUtilsMethods.startUri = function callee$0$0(uri, pkg) {
  var args, res;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!uri || !pkg)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("URI and package arguments are required");

      case 2:
        context$1$0.prev = 2;
        args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri.replace(/&/g, '\\&'), pkg];
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 6:
        res = context$1$0.sent;

        if (!res.toLowerCase().includes('unable to resolve intent')) {
          context$1$0.next = 9;
          break;
        }

        throw new Error(res);

      case 9:
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](2);
        throw new Error('Error attempting to start URI. Original error: ' + context$1$0.t0);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 11]]);
};

/**
 * @typedef {Object} StartAppOptions
 * @property {!string} activity - The name of the main application activity
 * @property {!string} pkg - The name of the application package
 * @property {?boolean} retry [true] - If this property is set to `true`
 * and the activity name does not start with '.' then the method
 * will try to add the missing dot and start the activity once more
 * if the first startup try fails.
 * @property {?boolean} stopApp [true] - Set it to `true` in order to forcefully
 * stop the activity if it is already running.
 * @property {?string} waitPkg - The name of the package to wait to on
 * startup (this only makes sense if this name is different from the one, which is set as `pkg`)
 * @property {?string} waitActivity - The name of the activity to wait to on
 * startup (this only makes sense if this name is different from the one, which is set as `activity`)
 * @property {?number} waitDuration - The number of milliseconds to wait until the
 * `waitActivity` is focused
 * @property {?string|number} user - The number of the user profile to start
 * the given activity with. The default OS user profile (usually zero) is used
 * when this property is unset
 */

/**
 * Start the particular package/activity on the device under test.
 *
 * @param {StartAppOptions} startAppOptions [{}] - Startup options mapping.
 * @return {string} The output of the corresponding adb command.
 * @throws {Error} If there is an error while executing the activity
 */
apkUtilsMethods.startApp = function callee$0$0() {
  var startAppOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var apiLevel, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!startAppOptions.activity || !startAppOptions.pkg)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("activity and pkg are required to start an application");

      case 2:

        startAppOptions = _lodash2['default'].clone(startAppOptions);
        startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');
        // initializing defaults
        _lodash2['default'].defaults(startAppOptions, {
          waitPkg: startAppOptions.pkg,
          waitActivity: false,
          retry: true,
          stopApp: true
        });
        // preventing null waitpkg
        startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 8:
        apiLevel = context$1$0.sent;
        cmd = (0, _helpersJs.buildStartCmd)(startAppOptions, apiLevel);
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 13:
        stdout = context$1$0.sent;

        if (!(stdout.includes("Error: Activity class") && stdout.includes("does not exist"))) {
          context$1$0.next = 25;
          break;
        }

        if (!(startAppOptions.retry && !startAppOptions.activity.startsWith("."))) {
          context$1$0.next = 22;
          break;
        }

        _loggerJs2['default'].debug('We tried to start an activity that doesn\'t exist, ' + ('retrying with \'.' + startAppOptions.activity + '\' activity name'));
        startAppOptions.activity = '.' + startAppOptions.activity;
        startAppOptions.retry = false;
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.startApp(startAppOptions));

      case 21:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 22:
        throw new Error('Activity name \'' + startAppOptions.activity + '\' used to start the app doesn\'t ' + 'exist or cannot be launched! Make sure it exists and is a launchable activity');

      case 25:
        if (!stdout.includes("java.lang.SecurityException")) {
          context$1$0.next = 27;
          break;
        }

        throw new Error('The permission to start \'' + startAppOptions.activity + '\' activity has been denied.' + 'Make sure the activity/package names are correct.');

      case 27:
        if (!startAppOptions.waitActivity) {
          context$1$0.next = 30;
          break;
        }

        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration));

      case 30:
        return context$1$0.abrupt('return', stdout);

      case 33:
        context$1$0.prev = 33;
        context$1$0.t0 = context$1$0['catch'](10);
        throw new Error('Cannot start the \'' + startAppOptions.pkg + '\' application. Original error: ' + context$1$0.t0.message);

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 33]]);
};

/**
 * @typedef {Object} PackageActivityInfo
 * @property {?string} appPackage - The name of application package,
 *                                  for example 'com.acme.app'.
 * @property {?string} appActivity - The name of main application activity.
 */

/**
 * Get the name of currently focused package and activity.
 *
 * @return {PackageActivityInfo} The mapping, where property names are 'appPackage' and 'appActivity'.
 * @throws {Error} If there is an error while parsing the data.
 */
apkUtilsMethods.getFocusedPackageAndActivity = function callee$0$0() {
  var cmd, nullFocusedAppRe, focusedAppRe, nullCurrentFocusRe, currentFocusAppRe, stdout, _arr, _i, pattern, match, _arr2, _i2;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Getting focused package and activity");
        cmd = ['dumpsys', 'window', 'windows'];
        nullFocusedAppRe = new RegExp(/^\s*mFocusedApp=null/, 'm');
        focusedAppRe = new RegExp('^\\s*mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}', 'm');
        nullCurrentFocusRe = new RegExp(/^\s*mCurrentFocus=null/, 'm');
        currentFocusAppRe = new RegExp('^\\s*mCurrentFocus.+\\{.+\\s([^\\s\\/]+)\\/([^\\s]+)\\b', 'm');
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 9:
        stdout = context$1$0.sent;
        _arr = [focusedAppRe, currentFocusAppRe];
        _i = 0;

      case 12:
        if (!(_i < _arr.length)) {
          context$1$0.next = 20;
          break;
        }

        pattern = _arr[_i];
        match = pattern.exec(stdout);

        if (!match) {
          context$1$0.next = 17;
          break;
        }

        return context$1$0.abrupt('return', {
          appPackage: match[1].trim(),
          appActivity: match[2].trim()
        });

      case 17:
        _i++;
        context$1$0.next = 12;
        break;

      case 20:
        _arr2 = [nullFocusedAppRe, nullCurrentFocusRe];
        _i2 = 0;

      case 22:
        if (!(_i2 < _arr2.length)) {
          context$1$0.next = 29;
          break;
        }

        pattern = _arr2[_i2];

        if (!pattern.exec(stdout)) {
          context$1$0.next = 26;
          break;
        }

        return context$1$0.abrupt('return', {
          appPackage: null,
          appActivity: null
        });

      case 26:
        _i2++;
        context$1$0.next = 22;
        break;

      case 29:
        throw new Error("Could not parse activity from dumpsys");

      case 32:
        context$1$0.prev = 32;
        context$1$0.t0 = context$1$0['catch'](6);
        throw new Error('Could not get focusPackageAndActivity. Original error: ' + context$1$0.t0.message);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 32]]);
};

/**
 * Wait for the given activity to be focused/non-focused.
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {boolean} waitForStop - Whether to wait until the activity is focused (true)
 *                                or is not focused (false).
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */
apkUtilsMethods.waitForActivityOrNot = function callee$0$0(pkg, activity, waitForStop) {
  var waitMs = arguments.length <= 3 || arguments[3] === undefined ? 20000 : arguments[3];

  var splitNames, allPackages, allActivities, possibleActivityNames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, oneActivity, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, currentPkg, possibleActivityPatterns, retries;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!pkg || !activity)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Package and activity required.');

      case 2:
        _loggerJs2['default'].debug('Waiting up to ' + waitMs + 'ms for activity matching pkg: \'' + pkg + '\' and ' + ('activity: \'' + activity + '\' to' + (waitForStop ? ' not' : '') + ' be focused'));

        splitNames = function splitNames(names) {
          return names.split(',').map(function (name) {
            return name.trim();
          });
        };

        allPackages = splitNames(pkg);
        allActivities = splitNames(activity);
        possibleActivityNames = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 10;
        _iterator = _getIterator(allActivities);

      case 12:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 41;
          break;
        }

        oneActivity = _step.value;

        if (!oneActivity.startsWith('.')) {
          context$1$0.next = 36;
          break;
        }

        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 18;

        // add the package name if activity is not full qualified
        for (_iterator2 = _getIterator(allPackages); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          currentPkg = _step2.value;

          possibleActivityNames.push(('' + currentPkg + oneActivity).replace(/\.+/g, '.'));
        }
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError2) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError2;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        context$1$0.next = 38;
        break;

      case 36:
        // accept fully qualified activity name.
        possibleActivityNames.push(oneActivity);
        possibleActivityNames.push(pkg + '.' + oneActivity);

      case 38:
        _iteratorNormalCompletion = true;
        context$1$0.next = 12;
        break;

      case 41:
        context$1$0.next = 47;
        break;

      case 43:
        context$1$0.prev = 43;
        context$1$0.t1 = context$1$0['catch'](10);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 47:
        context$1$0.prev = 47;
        context$1$0.prev = 48;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 50:
        context$1$0.prev = 50;

        if (!_didIteratorError) {
          context$1$0.next = 53;
          break;
        }

        throw _iteratorError;

      case 53:
        return context$1$0.finish(50);

      case 54:
        return context$1$0.finish(47);

      case 55:
        /* jshint ignore:start */
        _loggerJs2['default'].debug('Possible activities, to be checked: ' + possibleActivityNames.map(function (name) {
          return '\'' + name + '\'';
        }).join(', '));
        /* jshint ignore:end */
        possibleActivityPatterns = possibleActivityNames.map(function (possibleActivityName) {
          return new RegExp('^' + possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$') + '$');
        });
        retries = parseInt(waitMs / 750, 10) || 1;

        retries = isNaN(retries) ? 30 : retries;
        context$1$0.next = 61;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 750, function callee$1$0() {
          var _ref, appPackage, appActivity, _ret;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.getFocusedPackageAndActivity());

              case 2:
                _ref = context$2$0.sent;
                appPackage = _ref.appPackage;
                appActivity = _ref.appActivity;

                if (!(appActivity && appPackage)) {
                  context$2$0.next = 9;
                  break;
                }

                _ret = (function () {
                  var fullyQualifiedActivity = appActivity.startsWith('.') ? '' + appPackage + appActivity : appActivity;
                  _loggerJs2['default'].debug('Found package: \'' + appPackage + '\' and fully qualified activity name : \'' + fullyQualifiedActivity + '\'');
                  var foundAct = _lodash2['default'].includes(allPackages, appPackage) && _lodash2['default'].findIndex(possibleActivityPatterns, function (possiblePattern) {
                    return possiblePattern.test(fullyQualifiedActivity);
                  }) !== -1;
                  if (!waitForStop && foundAct || waitForStop && !foundAct) {
                    return {
                      v: undefined
                    };
                  }
                })();

                if (!(typeof _ret === 'object')) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', _ret.v);

              case 9:
                _loggerJs2['default'].debug('Incorrect package and activity. Retrying.');
                /* jshint ignore:start */
                throw new Error(possibleActivityNames.map(function (name) {
                  return '\'' + name + '\'';
                }).join(' or ') + ' never ' + (waitForStop ? 'stopped' : 'started'));

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 61:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 43, 47, 55], [18, 22, 26, 34], [27,, 29, 33], [48,, 50, 54]]);
};

/**
 * Wait for the given activity to be focused
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */

/* jshint ignore:end */
apkUtilsMethods.waitForActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, false, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Wait for the given activity to be non-focused.
 *
 * @param {string} pkg - The name of the package to wait for.
 * @param {string} activity - The name of the activity, belonging to that package,
 *                            to wait for.
 * @param {number} waitMs [20000] - Number of milliseconds to wait before timeout occurs.
 * @throws {error} If timeout happens.
 */
apkUtilsMethods.waitForNotActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, true, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} UninstallOptions
 * @property {number} timeout [20000] - The count of milliseconds to wait until the
 *                                      app is uninstalled.
 * @property {boolean} keepData [false] - Set to true in order to keep the
 *                                        application data and cache folders after uninstall.
 */

var APK_UNINSTALL_TIMEOUT = 20000;

/**
 * Uninstall the given package from the device under test.
 *
 * @param {string} pkg - The name of the package to be uninstalled.
 * @param {?UninstallOptions} options - The set of uninstallation options.
 * @return {boolean} True if the package was found on the device and
 *                   successfully uninstalled.
 */
apkUtilsMethods.uninstallApk = function callee$0$0(pkg) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var timeout, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Uninstalling ' + pkg);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.isAppInstalled(pkg));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].info(pkg + ' was not uninstalled, because it was not present on the device');
        return context$1$0.abrupt('return', false);

      case 6:
        timeout = APK_UNINSTALL_TIMEOUT;

        if (_appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout)) {
          timeout = parseInt(options.timeout, 10);
        }
        cmd = ['uninstall'];

        if (options.keepData) {
          cmd.push('-k');
        }
        cmd.push(pkg);

        stdout = undefined;
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.adbExec(cmd, { timeout: timeout }));

      case 17:
        stdout = context$1$0.sent.trim();
        context$1$0.next = 23;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](12);
        throw new Error('Unable to uninstall APK. Original error: ' + context$1$0.t0.message);

      case 23:
        _loggerJs2['default'].debug('\'adb ' + cmd.join(' ') + '\' command output: ' + stdout);

        if (!stdout.includes("Success")) {
          context$1$0.next = 27;
          break;
        }

        _loggerJs2['default'].info(pkg + ' was successfully uninstalled');
        return context$1$0.abrupt('return', true);

      case 27:
        _loggerJs2['default'].info(pkg + ' was not uninstalled');
        return context$1$0.abrupt('return', false);

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[12, 20]]);
};

/**
 * Install the package after it was pushed to the device under test.
 *
 * @param {string} apkPathOnDevice - The full path to the package on the device file system.
 * @param {object} opts [{}] - Additional exec options. See {@link https://github.com/appium/node-teen_process}
 *                             for more details on this parameter.
 * @throws {error} If there was a failure during application install.
 */
apkUtilsMethods.installFromDevicePath = function callee$0$0(apkPathOnDevice) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'install', '-r', apkPathOnDevice], opts));

      case 2:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Failure") !== -1)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Remote install failed: ' + stdout);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

var APK_INSTALL_TIMEOUT = 60000;

/**
 * @typedef {Object} InstallOptions
 * @property {number} timeout [60000] - The count of milliseconds to wait until the
 *                                      app is installed.
 * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
 *                                                 packages installation.
 * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
 *                                         instead of the device memory.
 * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
 *                                                permissions requested in the application's manifest
 *                                                automatically after the installation is completed
 *                                                under Android 6+.
 * @property {boolean} replace [true] - Set it to false if you don't want
 *                                      the application to be upgraded/reinstalled
 *                                      if it is already present on the device.
 */

/**
 * Install the package from the local file system.
 *
 * @param {string} apk - The full path to the local package.
 * @param {boolean} repalce [true] - Whether to replace the package if it
 *                                   already installed. True by default.
 * @param {?InstallOptions} options - The set of installation options.
 * @throws {error} If an unexpected error happens during install.
 */
apkUtilsMethods.install = function callee$0$0(apk) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var timeout, additionalArgs, apiLevel, executeInstall;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(options.replace)) {
          options.replace = true;
        }
        timeout = APK_INSTALL_TIMEOUT;

        if (_appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout)) {
          timeout = parseInt(options.timeout, 10);
        }

        additionalArgs = [];

        if (options.allowTestPackages) {
          additionalArgs.push('-t');
        }
        if (options.useSdcard) {
          additionalArgs.push('-s');
        }

        if (!options.grantPermissions) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;

        if (apiLevel < 23) {
          _loggerJs2['default'].debug('Skipping granting permissions for \'' + apk + '\', since ' + ('the current API level ' + apiLevel + ' does not support applications ') + 'permissions customization');
        } else {
          additionalArgs.push('-g');
        }

      case 11:
        executeInstall = function executeInstall(args) {
          var output, truncatedOutput;
          return _regeneratorRuntime.async(function executeInstall$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adbExec(['install'].concat(_toConsumableArray(args), [apk]), { timeout: timeout }));

              case 2:
                output = context$2$0.sent;
                truncatedOutput = !_lodash2['default'].isString(output) || output.length <= 300 ? output : output.substr(0, 150) + '...' + output.substr(output.length - 150);

                _loggerJs2['default'].debug('Install command stdout: ' + truncatedOutput);

                if (!(_lodash2['default'].isString(output) && output.includes('INSTALL_FAILED'))) {
                  context$2$0.next = 7;
                  break;
                }

                throw new Error(output);

              case 7:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        };

        if (!options.replace) {
          context$1$0.next = 16;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(executeInstall(['-r'].concat(additionalArgs)));

      case 15:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 16:
        context$1$0.prev = 16;
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(executeInstall(additionalArgs));

      case 19:
        context$1$0.next = 26;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](16);

        if (context$1$0.t0.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
          context$1$0.next = 25;
          break;
        }

        throw context$1$0.t0;

      case 25:
        _loggerJs2['default'].debug('Application \'' + apk + '\' already installed. Continuing.');

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[16, 21]]);
};

/**
 * @typedef {Object} InstallOrUpgradeOptions
 * @property {number} timeout [60000] - The count of milliseconds to wait until the
 *                                      app is installed.
 * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
 *                                                 packages installation.
 * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
 *                                         instead of the device memory.
 * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
 *                                                permissions requested in the application's manifest
 *                                                automatically after the installation is completed
 *                                                under Android 6+.
 */

/**
 * Install the package from the local file system of upgrade it if an older
 * version of the same package is already installed.
 *
 * @param {string} apk - The full path to the local package.
 * @param {?string} pkg - The name of the installed package. The method will
 *                        perform faster if it is set.
 * @param {?InstallOrUpgradeOptions} options - Set of install options.
 * @throws {error} If an unexpected error happens during install.
 */
apkUtilsMethods.installOrUpgrade = function callee$0$0(apk) {
  var pkg = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var apkInfo, _ref2, pkgVersionCode, pkgVersionNameStr, pkgVersionName, _apkInfo, apkVersionCode, apkVersionNameStr, apkVersionName;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(options.timeout)) {
          options.timeout = APK_INSTALL_TIMEOUT;
        }

        apkInfo = null;

        if (pkg) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 5:
        apkInfo = context$1$0.sent;

        pkg = apkInfo.name;

      case 7:
        if (pkg) {
          context$1$0.next = 10;
          break;
        }

        _loggerJs2['default'].warn('Cannot read the package name of ' + apk + '. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.isAppInstalled(pkg));

      case 12:
        if (context$1$0.sent) {
          context$1$0.next = 17;
          break;
        }

        _loggerJs2['default'].debug('App \'' + apk + '\' not installed. Installing');
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: false })));

      case 16:
        return context$1$0.abrupt('return');

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(this.getPackageInfo(pkg));

      case 19:
        _ref2 = context$1$0.sent;
        pkgVersionCode = _ref2.versionCode;
        pkgVersionNameStr = _ref2.versionName;
        pkgVersionName = _semver2['default'].valid(_semver2['default'].coerce(pkgVersionNameStr));

        if (apkInfo) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 26:
        apkInfo = context$1$0.sent;

      case 27:
        _apkInfo = apkInfo;
        apkVersionCode = _apkInfo.versionCode;
        apkVersionNameStr = _apkInfo.versionName;
        apkVersionName = _semver2['default'].valid(_semver2['default'].coerce(apkVersionNameStr));

        if (!(!_lodash2['default'].isInteger(apkVersionCode) || !_lodash2['default'].isInteger(pkgVersionCode))) {
          context$1$0.next = 36;
          break;
        }

        _loggerJs2['default'].warn('Cannot read version codes of \'' + apk + '\' and/or \'' + pkg + '\'');

        if (!(!_lodash2['default'].isString(apkVersionName) || !_lodash2['default'].isString(pkgVersionName))) {
          context$1$0.next = 36;
          break;
        }

        _loggerJs2['default'].warn('Cannot read version names of \'' + apk + '\' and/or \'' + pkg + '\'. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 36:
        if (!(_lodash2['default'].isInteger(apkVersionCode) && _lodash2['default'].isInteger(pkgVersionCode))) {
          context$1$0.next = 49;
          break;
        }

        if (!(pkgVersionCode > apkVersionCode)) {
          context$1$0.next = 40;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (' + pkgVersionCode + ' > ' + apkVersionCode + ')');
        return context$1$0.abrupt('return');

      case 40:
        if (!(pkgVersionCode === apkVersionCode)) {
          context$1$0.next = 47;
          break;
        }

        if (!(_lodash2['default'].isString(apkVersionName) && _lodash2['default'].isString(pkgVersionName) && _semver2['default'].satisfies(pkgVersionName, '>=' + apkVersionName))) {
          context$1$0.next = 44;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (\'' + pkgVersionName + '\' >= \'' + apkVersionName + '\')');
        return context$1$0.abrupt('return');

      case 44:
        if (!(!_lodash2['default'].isString(apkVersionName) || !_lodash2['default'].isString(pkgVersionName))) {
          context$1$0.next = 47;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (' + pkgVersionCode + ' === ' + apkVersionCode + ')');
        return context$1$0.abrupt('return');

      case 47:
        context$1$0.next = 52;
        break;

      case 49:
        if (!(_lodash2['default'].isString(apkVersionName) && _lodash2['default'].isString(pkgVersionName) && _semver2['default'].satisfies(pkgVersionName, '>=' + apkVersionName))) {
          context$1$0.next = 52;
          break;
        }

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package does not require upgrade (\'' + pkgVersionName + '\' >= \'' + apkVersionName + '\')');
        return context$1$0.abrupt('return');

      case 52:

        _loggerJs2['default'].debug('The installed \'' + pkg + '\' package is older than \'' + apk + '\' ' + ('(' + pkgVersionCode + ' < ' + apkVersionCode + ' or \'' + pkgVersionName + '\' < \'' + apkVersionName + '\')\'. ') + 'Executing upgrade');
        context$1$0.prev = 53;
        context$1$0.next = 56;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: true })));

      case 56:
        context$1$0.next = 67;
        break;

      case 58:
        context$1$0.prev = 58;
        context$1$0.t0 = context$1$0['catch'](53);

        _loggerJs2['default'].warn('Cannot upgrade \'' + pkg + '\' because of \'' + context$1$0.t0.message + '\'. Trying full reinstall');
        context$1$0.next = 63;
        return _regeneratorRuntime.awrap(this.uninstallApk(pkg));

      case 63:
        if (context$1$0.sent) {
          context$1$0.next = 65;
          break;
        }

        throw new Error('\'' + pkg + '\' package cannot be uninstalled');

      case 65:
        context$1$0.next = 67;
        return _regeneratorRuntime.awrap(this.install(apk, _Object$assign({}, options, { replace: false })));

      case 67:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[53, 58]]);
};

/**
 * Extract string resources from the given package on local file system.
 *
 * @param {string} apk - The full path to the local package.
 * @param {?string} language - The name of the language to extract the resources for.
 *                             The default language is used if this equals to `null`/`undefined`
 * @param {string} out - The name of the destination folder on the local file system to
 *                       store the extracted file to.
 * @return {Object} A mapping object, where properties are: 'apkStrings', containing
 *                  parsed resource file represented as JSON object, and 'localPath',
 *                  containing the path to the extracted file on the local file system.
 */
apkUtilsMethods.extractStringsFromApk = function callee$0$0(apk, language, out) {
  var rawAaptOutput, _ref3,
  // Assume the 'en' configuration is the default one
  stdout, defaultConfigMarker, configMarker, _ref4, configs, apkStrings, isInConfig, currentResourceId, isInPluralGroup, startsWithAny, normalizeStringMatch, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, line, trimmedLine, match, localPath;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Extracting strings for language: ' + (language || 'default'));
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        rawAaptOutput = undefined;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['d', '--values', 'resources', apk]));

      case 7:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;

        rawAaptOutput = stdout;
        context$1$0.next = 15;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](4);
        throw new Error('Cannot extract resources from \'' + apk + '\'. Original error: ' + context$1$0.t0.message);

      case 15:
        defaultConfigMarker = '(default)';
        configMarker = language || defaultConfigMarker;

        if (configMarker.includes('-') && !configMarker.includes('-r')) {
          configMarker = configMarker.replace('-', '-r');
        }

        if (!configMarker.toLowerCase().startsWith('en')) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['d', 'configurations', apk]));

      case 21:
        _ref4 = context$1$0.sent;
        stdout = _ref4.stdout;
        configs = stdout.split(_os2['default'].EOL);

        if (!configs.includes(configMarker)) {
          _loggerJs2['default'].debug('There is no \'' + configMarker + '\' configuration. ' + ('Replacing it with \'' + defaultConfigMarker + '\''));
          configMarker = defaultConfigMarker;
        }

      case 25:
        apkStrings = {};
        isInConfig = false;
        currentResourceId = null;
        isInPluralGroup = false;

        startsWithAny = function startsWithAny(s, arr) {
          return arr.reduce(function (acc, x) {
            return acc || s.startsWith(x);
          }, false);
        };

        normalizeStringMatch = function normalizeStringMatch(s) {
          return s.replace(/"$/, '').replace(/^"/, '').replace(/\\"/g, '"');
        };

        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 34;
        _iterator3 = _getIterator(rawAaptOutput.split(_os2['default'].EOL));

      case 36:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 65;
          break;
        }

        line = _step3.value;
        trimmedLine = line.trim();

        if (!_lodash2['default'].isEmpty(trimmedLine)) {
          context$1$0.next = 41;
          break;
        }

        return context$1$0.abrupt('continue', 62);

      case 41:
        if (!startsWithAny(trimmedLine, ['config', 'type', 'spec', 'Package'])) {
          context$1$0.next = 46;
          break;
        }

        isInConfig = trimmedLine.startsWith('config ' + configMarker + ':');
        currentResourceId = null;
        isInPluralGroup = false;
        return context$1$0.abrupt('continue', 62);

      case 46:
        if (isInConfig) {
          context$1$0.next = 48;
          break;
        }

        return context$1$0.abrupt('continue', 62);

      case 48:
        if (!trimmedLine.startsWith('resource')) {
          context$1$0.next = 53;
          break;
        }

        isInPluralGroup = false;
        currentResourceId = null;

        if (trimmedLine.includes(':string/')) {
          match = /:string\/(\S+):/.exec(trimmedLine);

          if (match) {
            currentResourceId = match[1];
          }
        } else if (trimmedLine.includes(':plurals/')) {
          match = /:plurals\/(\S+):/.exec(trimmedLine);

          if (match) {
            currentResourceId = match[1];
            isInPluralGroup = true;
          }
        }
        return context$1$0.abrupt('continue', 62);

      case 53:
        if (!(currentResourceId && trimmedLine.startsWith('(string'))) {
          context$1$0.next = 58;
          break;
        }

        match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

        if (match) {
          apkStrings[currentResourceId] = normalizeStringMatch(match[0]);
        }
        currentResourceId = null;
        return context$1$0.abrupt('continue', 62);

      case 58:
        if (!(currentResourceId && isInPluralGroup && trimmedLine.includes(': (string'))) {
          context$1$0.next = 62;
          break;
        }

        match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

        if (match) {
          apkStrings[currentResourceId] = [].concat(_toConsumableArray(apkStrings[currentResourceId] || []), [normalizeStringMatch(match[0])]);
        }
        return context$1$0.abrupt('continue', 62);

      case 62:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 36;
        break;

      case 65:
        context$1$0.next = 71;
        break;

      case 67:
        context$1$0.prev = 67;
        context$1$0.t1 = context$1$0['catch'](34);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t1;

      case 71:
        context$1$0.prev = 71;
        context$1$0.prev = 72;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 74:
        context$1$0.prev = 74;

        if (!_didIteratorError3) {
          context$1$0.next = 77;
          break;
        }

        throw _iteratorError3;

      case 77:
        return context$1$0.finish(74);

      case 78:
        return context$1$0.finish(71);

      case 79:

        if (_lodash2['default'].isEmpty(apkStrings)) {
          _loggerJs2['default'].warn('No strings have been found in \'' + apk + '\' resources ' + ('for \'' + configMarker + '\' configuration'));
        } else {
          _loggerJs2['default'].info('Successfully extracted ' + _lodash2['default'].keys(apkStrings).length + ' strings from \'' + apk + '\' resources ' + ('for \'' + configMarker + '\' configuration'));
        }

        localPath = _path2['default'].resolve(out, 'strings.json');
        context$1$0.next = 83;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(out));

      case 83:
        context$1$0.next = 85;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8'));

      case 85:
        return context$1$0.abrupt('return', { apkStrings: apkStrings, localPath: localPath });

      case 86:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 12], [34, 67, 71, 79], [72,, 74, 78]]);
};

/**
 * Get the language name of the device under test.
 *
 * @return {string} The name of device language.
 */
apkUtilsMethods.getDeviceLanguage = function callee$0$0() {
  var language;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        language = undefined;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getDeviceSysLanguage());

      case 7:
        language = context$1$0.sent;

        if (language) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getDeviceProductLanguage());

      case 11:
        language = context$1$0.sent;

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 16:
        language = context$1$0.sent.split("-")[0];

      case 17:
        return context$1$0.abrupt('return', language);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the language name of the device under test.
 *
 * @param {string} language - The name of the new device language.
 */
apkUtilsMethods.setDeviceLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLanguage(language));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the country name of the device under test.
 *
 * @return {string} The name of device country.
 */
apkUtilsMethods.getDeviceCountry = function callee$0$0() {
  var country;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysCountry());

      case 2:
        country = context$1$0.sent;

        if (country) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductCountry());

      case 6:
        country = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', country);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the country name of the device under test.
 *
 * @param {string} country - The name of the new device country.
 */
apkUtilsMethods.setDeviceCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysCountry(country));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the locale name of the device under test.
 *
 * @return {string} The name of device locale.
 */
apkUtilsMethods.getDeviceLocale = function callee$0$0() {
  var locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysLocale());

      case 2:
        locale = context$1$0.sent;

        if (locale) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductLocale());

      case 6:
        locale = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', locale);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the locale name of the device under test and the format of the locale is en-US, for example.
 * This method call setDeviceLanguageCountry, so, please use setDeviceLanguageCountry as possible.
 *
 * @param {string} locale - Names of the device language and the country connected with `-`. e.g. en-US.
 */
apkUtilsMethods.setDeviceLocale = function callee$0$0(locale) {
  var validateLocale, split_locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

        if (validateLocale.test(locale)) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLocale requires the following format: en-US or ja-JP');
        return context$1$0.abrupt('return');

      case 4:
        split_locale = locale.split("-");
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.setDeviceLanguageCountry(split_locale[0], split_locale[1]));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Make sure current device locale is expected or not.
 *
 * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
 * @param {string} country - Country. The language field is case insensitive, but Locale always canonicalizes to lower case.
 *
 * @return {boolean} If current locale is language and country as arguments, return true.
 */
apkUtilsMethods.ensureCurrentLocale = function callee$0$0(language, country) {
  var hasLanguage, hasCountry, apiLevel;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hasLanguage = _lodash2['default'].isString(language);
        hasCountry = _lodash2['default'].isString(country);

        if (!(!hasLanguage && !hasCountry)) {
          context$1$0.next = 5;
          break;
        }

        _loggerJs2['default'].warn('ensureCurrentLocale requires language or country');
        return context$1$0.abrupt('return', false);

      case 5:

        // get lower case versions of the strings
        language = (language || '').toLowerCase();
        country = (country || '').toLowerCase();

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 1000, function callee$1$0() {
          var curLanguage, curCountry, curLocale;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;

                if (!(apiLevel < 23)) {
                  context$2$0.next = 19;
                  break;
                }

                curLanguage = undefined, curCountry = undefined;

                if (!hasLanguage) {
                  context$2$0.next = 9;
                  break;
                }

                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(this.getDeviceLanguage());

              case 6:
                curLanguage = context$2$0.sent.toLowerCase();

                if (!(!hasCountry && language === curLanguage)) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 9:
                if (!hasCountry) {
                  context$2$0.next = 15;
                  break;
                }

                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(this.getDeviceCountry());

              case 12:
                curCountry = context$2$0.sent.toLowerCase();

                if (!(!hasLanguage && country === curCountry)) {
                  context$2$0.next = 15;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 15:
                if (!(language === curLanguage && country === curCountry)) {
                  context$2$0.next = 17;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 17:
                context$2$0.next = 24;
                break;

              case 19:
                context$2$0.next = 21;
                return _regeneratorRuntime.awrap(this.getDeviceLocale());

              case 21:
                curLocale = context$2$0.sent.toLowerCase();

                if (!(language + '-' + country === curLocale)) {
                  context$2$0.next = 24;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 24:
                return context$2$0.abrupt('return', false);

              case 27:
                context$2$0.prev = 27;
                context$2$0.t0 = context$2$0['catch'](0);

                // if there has been an error, restart adb and retry
                _loggerJs2['default'].error('Unable to check device localization: ' + context$2$0.t0.message);
                _loggerJs2['default'].debug('Restarting ADB and retrying...');
                context$2$0.next = 33;
                return _regeneratorRuntime.awrap(this.restartAdb());

              case 33:
                throw context$2$0.t0;

              case 34:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3, [[0, 27]]);
        }));

      case 12:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the locale name of the device under test.
 *
 * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
 *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html
 * @param {string} country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.
 *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html
 */
apkUtilsMethods.setDeviceLanguageCountry = function callee$0$0(language, country) {
  var hasLanguage, hasCountry, wasSettingChanged, apiLevel, curLanguage, curCountry, curLocale, locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hasLanguage = language && _lodash2['default'].isString(language);
        hasCountry = country && _lodash2['default'].isString(country);

        if (!(!hasLanguage && !hasCountry)) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLanguageCountry requires language or country.');
        _loggerJs2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 6:
        wasSettingChanged = false;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 9:
        apiLevel = context$1$0.sent;

        language = (language || '').toLowerCase();
        country = (country || '').toUpperCase();

        if (!(apiLevel < 23)) {
          context$1$0.next = 29;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 15:
        curLanguage = context$1$0.sent.toLowerCase();
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getDeviceCountry());

      case 18:
        curCountry = context$1$0.sent.toUpperCase();

        if (!(hasLanguage && language !== curLanguage)) {
          context$1$0.next = 23;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.setDeviceLanguage(language));

      case 22:
        wasSettingChanged = true;

      case 23:
        if (!(hasCountry && country !== curCountry)) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.setDeviceCountry(country));

      case 26:
        wasSettingChanged = true;

      case 27:
        context$1$0.next = 50;
        break;

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 31:
        curLocale = context$1$0.sent;

        if (!(apiLevel === 23)) {
          context$1$0.next = 42;
          break;
        }

        locale = undefined;

        if (!hasCountry) {
          locale = language;
        } else if (!hasLanguage) {
          locale = country;
        } else {
          locale = language + '-' + country;
        }

        _loggerJs2['default'].debug('Current locale: \'' + curLocale + '\'; requested locale: \'' + locale + '\'');

        if (!(locale.toLowerCase() !== curLocale.toLowerCase())) {
          context$1$0.next = 40;
          break;
        }

        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocale(locale));

      case 39:
        wasSettingChanged = true;

      case 40:
        context$1$0.next = 50;
        break;

      case 42:
        if (!(!hasCountry || !hasLanguage)) {
          context$1$0.next = 46;
          break;
        }

        _loggerJs2['default'].warn('setDeviceLanguageCountry requires both language and country to be set for API 24+');
        _loggerJs2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 46:

        _loggerJs2['default'].debug('Current locale: \'' + curLocale + '\'; requested locale: \'' + language + '-' + country + '\'');

        if (!((language + '-' + country).toLowerCase() !== curLocale.toLowerCase())) {
          context$1$0.next = 50;
          break;
        }

        context$1$0.next = 50;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocaleViaSettingApp(language, country));

      case 50:
        if (!wasSettingChanged) {
          context$1$0.next = 54;
          break;
        }

        _loggerJs2['default'].info("Rebooting the device in order to apply new locale via 'setting persist.sys.locale' command.");
        context$1$0.next = 54;
        return _regeneratorRuntime.awrap(this.reboot());

      case 54:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the package name from local apk file.
 *
 * @param {string} apk - The full path to existing .apk package on the local
 *                       file system.
 * @return {string} The parsed package name or _null_ if it cannot be parsed.
 */
apkUtilsMethods.getPackageName = function callee$0$0(apk) {
  var args, _ref5, stdout, apkPackage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['dump', 'badging', apk];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 5:
        _ref5 = context$1$0.sent;
        stdout = _ref5.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (apkPackage && apkPackage.length >= 2) {
          apkPackage = apkPackage[1];
        } else {
          apkPackage = null;
        }
        return context$1$0.abrupt('return', apkPackage);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} AppInfo
 * @property {string} name - Package name, for example 'com.acme.app'.
 * @property {number} versionCode - Version code.
 * @property {string} versionName - Version name, for example '1.0'.
 */

/**
 * Get the package info from local apk file.
 *
 * @param {string} apkPath - The full path to existing .apk package on the local
 *                           file system.
 * @return {?AppInfo} The parsed application information.
 */
apkUtilsMethods.getApkInfo = function callee$0$0(apkPath) {
  var _ref6, stdout, matches;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apkPath));

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 4;
          break;
        }

        throw new Error('The file at path ' + apkPath + ' does not exist or is not accessible');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 6:
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', apkPath]));

      case 9:
        _ref6 = context$1$0.sent;
        stdout = _ref6.stdout;
        matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

        if (!matches) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        });

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](6);

        _loggerJs2['default'].warn('Error "' + context$1$0.t0.message + '" while getting badging info');

      case 19:
        return context$1$0.abrupt('return', {});

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 16]]);
};

/**
 * Get the package info from the installed application.
 *
 * @param {string} pkg - The name of the installed package.
 * @return {?AppInfo} The parsed application information.
 */
apkUtilsMethods.getPackageInfo = function callee$0$0(pkg) {
  var result, stdout, versionNameMatch, versionCodeMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Getting package info for \'' + pkg + '\'');
        result = { name: pkg };
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'package', pkg]));

      case 5:
        stdout = context$1$0.sent;
        versionNameMatch = new RegExp(/versionName=([\d+\.]+)/).exec(stdout);

        if (versionNameMatch) {
          result.versionName = versionNameMatch[1];
        }
        versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

        if (versionCodeMatch) {
          result.versionCode = parseInt(versionCodeMatch[1], 10);
        }
        return context$1$0.abrupt('return', result);

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](2);

        _loggerJs2['default'].warn('Error \'' + context$1$0.t0.message + '\' while dumping package info');

      case 16:
        return context$1$0.abrupt('return', result);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 13]]);
};

exports['default'] = apkUtilsMethods;
module.exports = exports['default'];

// if the app is disabled on a real device it will throw a security exception

// https://regex101.com/r/xZ8vF7/1

// The order matters here

// figure out the number of retries. Try once if waitMs is less that 750
// 30 times if parsing is not possible

// on some systems this will throw an error if the app already
// exists

// Version codes might not be maintained. Check version names.

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API >= 23
// API >= 24
//# sourceMappingURL=data:application/json;charset=utf8;base64,
