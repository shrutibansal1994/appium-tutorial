'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumUiautomator = require('appium-uiautomator');

var _appiumUiautomator2 = _interopRequireDefault(_appiumUiautomator);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('AndroidBootstrap');
var COMMAND_TYPES = {
  ACTION: 'action',
  SHUTDOWN: 'shutdown'
};
var SEND_COMMAND_TIMEOUT = 1 * 60 * 1000;

var AndroidBootstrap = (function () {
  function AndroidBootstrap(adb) {
    var systemPort = arguments.length <= 1 || arguments[1] === undefined ? 4724 : arguments[1];
    var webSocket = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

    _classCallCheck(this, AndroidBootstrap);

    this.adb = adb;
    this.systemPort = systemPort;
    this.webSocket = webSocket;
    this.ignoreUnexpectedShutdown = false;
  }

  _createClass(AndroidBootstrap, [{
    key: 'start',
    value: function start(appPackage) {
      var disableAndroidWatchers = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      var acceptSslCerts = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      var rootDir, startDetector, bootstrapJar;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            rootDir = _path2['default'].resolve(__dirname, '..', '..');

            startDetector = function startDetector(s) {
              return (/Appium Socket Server Ready/.test(s)
              );
            };

            bootstrapJar = _path2['default'].resolve(rootDir, 'bootstrap', 'bin', 'AppiumBootstrap.jar');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.init());

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.systemPort, 4724));

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.uiAutomator.start(bootstrapJar, 'io.appium.android.bootstrap.Bootstrap', startDetector, '-e', 'pkg', appPackage, '-e', 'disableAndroidWatchers', disableAndroidWatchers, '-e', 'acceptSslCerts', acceptSslCerts));

          case 10:
            this.process = context$2$0.sent;

            // process the output
            this.process.on('output', function (stdout, stderr) {
              var alertRe = /Emitting system alert message/;
              if (alertRe.test(stdout)) {
                log.debug("Emitting alert message...");
                if (_this.webSocket) {
                  _this.webSocket.sockets.emit('alert', { message: stdout });
                }
              }

              // the bootstrap logger wraps its own log lines with
              // [APPIUM-UIAUTO] ... [APPIUM-UIAUTO]
              // and leaves actual UiAutomator logs as they are
              var stdoutLines = (stdout || "").split("\n");
              var uiautoLog = /\[APPIUM-UIAUTO\](.+)\[\/APPIUM-UIAUTO\]/;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = _getIterator(stdoutLines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var line = _step.value;

                  if (line.trim()) {
                    if (uiautoLog.test(line)) {
                      var innerLine = uiautoLog.exec(line)[1].trim();
                      var logMethod = log.info.bind(log);
                      // if the bootstrap log considers something debug, log that as
                      // debug and not info
                      if (/\[debug\]/.test(innerLine)) {
                        logMethod = log.debug.bind(log);
                      }
                      logMethod('[BOOTSTRAP LOG] ' + innerLine);
                    } else {
                      log.debug('[UIAUTO STDOUT] ' + line);
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              var stderrLines = (stderr || "").split("\n");
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = _getIterator(stderrLines), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var line = _step2.value;

                  if (line.trim()) {
                    log.debug('[UIAUTO STDERR] ' + line);
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                    _iterator2['return']();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            });

            // only return when the socket client has connected
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              try {
                _this.socketClient = _net2['default'].connect(_this.systemPort);
                // Windows: the socket errors out when ADB restarts. Let's catch it to avoid crashing.
                _this.socketClient.on('error', function (err) {
                  if (!_this.ignoreUnexpectedShutdown) {
                    throw new Error('Android bootstrap socket crashed: ' + err);
                  }
                });
                _this.socketClient.once('connect', function () {
                  log.info("Android bootstrap socket is now connected");
                  resolve();
                });
              } catch (err) {
                reject(err);
              }
            }));

          case 14:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 17:
            context$2$0.prev = 17;
            context$2$0.t0 = context$2$0['catch'](0);

            log.errorAndThrow('Error occured while starting AndroidBootstrap. Original error: ' + context$2$0.t0);

          case 20:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 17]]);
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(type) {
      var extra = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.socketClient) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Socket connection closed unexpectedly');

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              var cmd = _Object$assign({ cmd: type }, extra);
              var cmdJson = JSON.stringify(cmd) + ' \n';
              log.debug('Sending command to android: ' + _lodash2['default'].truncate(cmdJson, { length: 1000 }).trim());
              _this2.socketClient.write(cmdJson);
              _this2.socketClient.setEncoding('utf8');
              var streamData = '';
              var sendCommandTimeoutHandler = null;
              _this2.socketClient.on('data', function (data) {
                if (sendCommandTimeoutHandler) {
                  clearTimeout(sendCommandTimeoutHandler);
                }
                log.debug("Received command result from bootstrap");
                try {
                  streamData = JSON.parse(streamData + data);
                  // we successfully parsed JSON so we've got all the data,
                  // remove the socket listener and evaluate
                  _this2.socketClient.removeAllListeners('data');
                  if (streamData.status === 0) {
                    return resolve(streamData.value);
                  }
                  reject((0, _appiumBaseDriver.errorFromCode)(streamData.status, streamData.value));
                } catch (err) {
                  if (!_lodash2['default'].isString(streamData)) {
                    log.error('Got an unexpected error inside socket listener');
                    log.error(err.stack);
                    return reject((0, _appiumBaseDriver.errorFromCode)(13, err.message));
                  }
                  log.debug('Stream still not complete, waiting up to ' + SEND_COMMAND_TIMEOUT + 'ms for the data to arrive');
                  streamData += data;
                  sendCommandTimeoutHandler = setTimeout(function () {
                    var errMsg = 'Server socket stopped responding. The recent response was \'' + streamData + '\'';
                    log.error(errMsg);
                    _this2.socketClient.removeAllListeners('data');
                    reject((0, _appiumBaseDriver.errorFromCode)(13, errMsg));
                  }, SEND_COMMAND_TIMEOUT);
                }
              });
            }));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'sendAction',
    value: function sendAction(action) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var extra;
      return _regeneratorRuntime.async(function sendAction$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            extra = { action: action, params: params };
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sendCommand(COMMAND_TYPES.ACTION, extra));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'shutdown',
    value: function shutdown() {
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.uiAutomator) {
              context$2$0.next = 3;
              break;
            }

            log.warn("Cannot shut down Android bootstrap; it has already shut down");
            return context$2$0.abrupt('return');

          case 3:

            // remove listners so we don't trigger unexpected shutdown
            this.uiAutomator.removeAllListeners(_appiumUiautomator2['default'].EVENT_CHANGED);

            if (!this.socketClient) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.sendCommand(COMMAND_TYPES.SHUTDOWN));

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.uiAutomator.shutdown());

          case 9:
            this.uiAutomator = null;

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // this helper function makes unit testing easier.
  }, {
    key: 'init',
    value: function init() {
      return _regeneratorRuntime.async(function init$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.uiAutomator = new _appiumUiautomator2['default'](this.adb);

            // Handle unexpected UiAutomator shutdown
            this.uiAutomator.on(_appiumUiautomator2['default'].EVENT_CHANGED, function callee$2$0(msg) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (msg.state === _appiumUiautomator2['default'].STATE_STOPPED) {
                      this.uiAutomator = null;
                      this.onUnexpectedShutdown.cancel(new Error("UiAUtomator shut down unexpectedly"));
                    }

                  case 1:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3);
            });

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'onUnexpectedShutdown',
    get: function get() {
      if (!this._onUnexpectedShutdownPromise) {
        var reject = undefined;
        this._onUnexpectedShutdownPromise = new _bluebird2['default'](function (_resolve, _reject) {
          reject = _reject;
        });
        this._onUnexpectedShutdownPromise.cancel = reject;
      }
      return this._onUnexpectedShutdownPromise;
    }
  }, {
    key: 'ignoreUnexpectedShutdown',
    set: function set(ignore) {
      log.debug((ignore ? 'Ignoring' : 'Watching for') + ' bootstrap disconnect');
      this._ignoreUnexpectedShutdown = ignore;
    },
    get: function get() {
      return this._ignoreUnexpectedShutdown;
    }
  }]);

  return AndroidBootstrap;
})();

exports.AndroidBootstrap = AndroidBootstrap;
exports.COMMAND_TYPES = COMMAND_TYPES;
exports['default'] = AndroidBootstrap;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
