'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var helpers = {},
    extensions = {};

/**
 * Reason for isolating doFindElementOrEls from findElOrEls is for reusing findElOrEls
 * across android-drivers (like appium-uiautomator2-driver) to avoid code duplication.
 * Other android-drivers (like appium-uiautomator2-driver) need to override doFindElementOrEls
 * to facilitate findElOrEls.
 */
helpers.doFindElementOrEls = function callee$0$0(params) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('find', params));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// stategy: locator strategy
// selector: the actual selector for finding an element
// mult: multiple elements or just one?
// context: finding an element from the root context? or starting from another element
helpers.findElOrEls = function callee$0$0(strategy, selector, mult) {
  var context = arguments.length <= 3 || arguments[3] === undefined ? '' : arguments[3];
  var params, element, doFind;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (selector) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Must provide a selector when finding elements");

      case 2:
        params = {
          strategy: strategy,
          selector: selector,
          context: context,
          multiple: mult
        };
        element = undefined;

        doFind = function doFind() {
          return _regeneratorRuntime.async(function doFind$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.doFindElementOrEls(params));

              case 3:
                element = context$2$0.sent;
                context$2$0.next = 12;
                break;

              case 6:
                context$2$0.prev = 6;
                context$2$0.t0 = context$2$0['catch'](0);

                // if the error that comes back is from a proxied request, we need to
                // unwrap it to its actual protocol error first
                if ((0, _appiumBaseDriver.isErrorType)(context$2$0.t0, _appiumBaseDriver.errors.ProxyRequestError)) {
                  context$2$0.t0 = context$2$0.t0.getActualError(); // eslint-disable-line no-ex-assign
                }

                // now we have to inspect the error to determine if it is a no such
                // element error, based on the shape of the error object from
                // appium-base-driver

                if (!(0, _appiumBaseDriver.isErrorType)(context$2$0.t0, _appiumBaseDriver.errors.NoSuchElementError)) {
                  context$2$0.next = 11;
                  break;
                }

                return context$2$0.abrupt('return', false);

              case 11:
                throw context$2$0.t0;

              case 12:
                return context$2$0.abrupt('return', !_lodash2['default'].isEmpty(element));

              case 13:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 6]]);
        };

        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.implicitWaitForCondition(doFind));

      case 8:
        context$1$0.next = 17;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        if (!(context$1$0.t0.message && context$1$0.t0.message.match(/Condition unmet/))) {
          context$1$0.next = 16;
          break;
        }

        // only get here if we are looking for multiple elements
        // condition was not met setting res to empty array
        element = [];
        context$1$0.next = 17;
        break;

      case 16:
        throw context$1$0.t0;

      case 17:
        if (!mult) {
          context$1$0.next = 19;
          break;
        }

        return context$1$0.abrupt('return', element);

      case 19:
        if (!_lodash2['default'].isEmpty(element)) {
          context$1$0.next = 21;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 21:
        return context$1$0.abrupt('return', element);

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, helpers);
exports.helpers = helpers;
exports['default'] = extensions;

// we are fine with this, just indicate a retry

// we want to return false if we want to potentially try again
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O2dDQUNjLG9CQUFvQjs7QUFHeEQsSUFBSSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUWxDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxvQkFBZ0IsTUFBTTs7Ozs7eUNBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7Ozs7Ozs7Ozs7Q0FDdkQsQ0FBQzs7Ozs7O0FBTUYsT0FBTyxDQUFDLFdBQVcsR0FBRyxvQkFBZ0IsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJO01BQUUsT0FBTyx5REFBRyxFQUFFO01BS3RFLE1BQU0sRUFPTixPQUFPLEVBQ1AsTUFBTTs7Ozs7O1lBWkwsUUFBUTs7Ozs7Y0FDTCxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQzs7O0FBRzlELGNBQU0sR0FBRztBQUNYLGtCQUFRLEVBQVIsUUFBUTtBQUNSLGtCQUFRLEVBQVIsUUFBUTtBQUNSLGlCQUFPLEVBQVAsT0FBTztBQUNQLGtCQUFRLEVBQUUsSUFBSTtTQUNmO0FBRUcsZUFBTzs7QUFDUCxjQUFNLEdBQUcsU0FBVCxNQUFNOzs7Ozs7aURBRVUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQzs7O0FBQS9DLHVCQUFPOzs7Ozs7Ozs7O0FBS1Asb0JBQUksbURBQWlCLHlCQUFPLGlCQUFpQixDQUFDLEVBQUU7QUFDOUMsbUNBQU0sZUFBSSxjQUFjLEVBQUUsQ0FBQztpQkFDNUI7Ozs7OztxQkFLRyxtREFBaUIseUJBQU8sa0JBQWtCLENBQUM7Ozs7O29EQUV0QyxLQUFLOzs7Ozs7b0RBTVQsQ0FBQyxvQkFBRSxPQUFPLENBQUMsT0FBTyxDQUFDOzs7Ozs7O1NBQzNCOzs7O3lDQUdPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7Ozs7Y0FFdkMsZUFBSSxPQUFPLElBQUksZUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUE7Ozs7Ozs7QUFHckQsZUFBTyxHQUFHLEVBQUUsQ0FBQzs7Ozs7Ozs7YUFNYixJQUFJOzs7Ozs0Q0FDQyxPQUFPOzs7YUFFWixvQkFBRSxPQUFPLENBQUMsT0FBTyxDQUFDOzs7OztjQUNkLElBQUkseUJBQU8sa0JBQWtCLEVBQUU7Ozs0Q0FFaEMsT0FBTzs7Ozs7OztDQUNmLENBQUM7O0FBRUYsZUFBYyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUIsT0FBTyxHQUFQLE9BQU87cUJBQ0QsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvZmluZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMsIGlzRXJyb3JUeXBlIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuXG5sZXQgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8qKlxuICogUmVhc29uIGZvciBpc29sYXRpbmcgZG9GaW5kRWxlbWVudE9yRWxzIGZyb20gZmluZEVsT3JFbHMgaXMgZm9yIHJldXNpbmcgZmluZEVsT3JFbHNcbiAqIGFjcm9zcyBhbmRyb2lkLWRyaXZlcnMgKGxpa2UgYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXIpIHRvIGF2b2lkIGNvZGUgZHVwbGljYXRpb24uXG4gKiBPdGhlciBhbmRyb2lkLWRyaXZlcnMgKGxpa2UgYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXIpIG5lZWQgdG8gb3ZlcnJpZGUgZG9GaW5kRWxlbWVudE9yRWxzXG4gKiB0byBmYWNpbGl0YXRlIGZpbmRFbE9yRWxzLlxuICovXG5oZWxwZXJzLmRvRmluZEVsZW1lbnRPckVscyA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ2ZpbmQnLCBwYXJhbXMpO1xufTtcblxuLy8gc3RhdGVneTogbG9jYXRvciBzdHJhdGVneVxuLy8gc2VsZWN0b3I6IHRoZSBhY3R1YWwgc2VsZWN0b3IgZm9yIGZpbmRpbmcgYW4gZWxlbWVudFxuLy8gbXVsdDogbXVsdGlwbGUgZWxlbWVudHMgb3IganVzdCBvbmU/XG4vLyBjb250ZXh0OiBmaW5kaW5nIGFuIGVsZW1lbnQgZnJvbSB0aGUgcm9vdCBjb250ZXh0PyBvciBzdGFydGluZyBmcm9tIGFub3RoZXIgZWxlbWVudFxuaGVscGVycy5maW5kRWxPckVscyA9IGFzeW5jIGZ1bmN0aW9uIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQgPSAnJykge1xuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBwcm92aWRlIGEgc2VsZWN0b3Igd2hlbiBmaW5kaW5nIGVsZW1lbnRzXCIpO1xuICB9XG5cbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBzdHJhdGVneSxcbiAgICBzZWxlY3RvcixcbiAgICBjb250ZXh0LFxuICAgIG11bHRpcGxlOiBtdWx0XG4gIH07XG5cbiAgbGV0IGVsZW1lbnQ7XG4gIGxldCBkb0ZpbmQgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGVsZW1lbnQgPSBhd2FpdCB0aGlzLmRvRmluZEVsZW1lbnRPckVscyhwYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuXG4gICAgICAvLyBpZiB0aGUgZXJyb3IgdGhhdCBjb21lcyBiYWNrIGlzIGZyb20gYSBwcm94aWVkIHJlcXVlc3QsIHdlIG5lZWQgdG9cbiAgICAgIC8vIHVud3JhcCBpdCB0byBpdHMgYWN0dWFsIHByb3RvY29sIGVycm9yIGZpcnN0XG4gICAgICBpZiAoaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuUHJveHlSZXF1ZXN0RXJyb3IpKSB7XG4gICAgICAgIGVyciA9IGVyci5nZXRBY3R1YWxFcnJvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4LWFzc2lnblxuICAgICAgfVxuXG4gICAgICAvLyBub3cgd2UgaGF2ZSB0byBpbnNwZWN0IHRoZSBlcnJvciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgYSBubyBzdWNoXG4gICAgICAvLyBlbGVtZW50IGVycm9yLCBiYXNlZCBvbiB0aGUgc2hhcGUgb2YgdGhlIGVycm9yIG9iamVjdCBmcm9tXG4gICAgICAvLyBhcHBpdW0tYmFzZS1kcml2ZXJcbiAgICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IpKSB7XG4gICAgICAgIC8vIHdlIGFyZSBmaW5lIHdpdGggdGhpcywganVzdCBpbmRpY2F0ZSBhIHJldHJ5XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICAvLyB3ZSB3YW50IHRvIHJldHVybiBmYWxzZSBpZiB3ZSB3YW50IHRvIHBvdGVudGlhbGx5IHRyeSBhZ2FpblxuICAgIHJldHVybiAhXy5pc0VtcHR5KGVsZW1lbnQpO1xuICB9O1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5pbXBsaWNpdFdhaXRGb3JDb25kaXRpb24oZG9GaW5kKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLm1hdGNoKC9Db25kaXRpb24gdW5tZXQvKSkge1xuICAgICAgLy8gb25seSBnZXQgaGVyZSBpZiB3ZSBhcmUgbG9va2luZyBmb3IgbXVsdGlwbGUgZWxlbWVudHNcbiAgICAgIC8vIGNvbmRpdGlvbiB3YXMgbm90IG1ldCBzZXR0aW5nIHJlcyB0byBlbXB0eSBhcnJheVxuICAgICAgZWxlbWVudCA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11bHQpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICBpZiAoXy5pc0VtcHR5KGVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IoKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaGVscGVycyk7XG5leHBvcnQgeyBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
