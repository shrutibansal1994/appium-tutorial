'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _androidHelpers = require('./android-helpers');

var _androidHelpers2 = _interopRequireDefault(_androidHelpers);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumAdb = require('appium-adb');

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var _sharedPreferencesBuilder = require('shared-preferences-builder');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var APP_EXTENSION = '.apk';
var DEVICE_PORT = 4724;

// This is a set of methods and paths that we never want to proxy to
// Chromedriver
var NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')]];

var AndroidDriver = (function (_BaseDriver) {
  _inherits(AndroidDriver, _BaseDriver);

  function AndroidDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, AndroidDriver);

    _get(Object.getPrototypeOf(AndroidDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps2['default'];
    this.sessionChromedrivers = {};
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash2['default'].clone(NO_PROXY);
    this.settings = new _appiumBaseDriver.DeviceSettings({ ignoreUnimportantViews: false }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.apkStrings = {};
    this.bootstrapPort = opts.bootstrapPort || DEVICE_PORT;
    this.unlocker = _androidHelpers2['default'].unlocker;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2);

        var cmd = _step$value[0];
        var fn = _step$value[1];

        AndroidDriver.prototype[cmd] = fn;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  _createClass(AndroidDriver, [{
    key: 'createSession',
    value: function createSession() {
      var _len,
          args,
          _key,
          _ref,
          _ref2,
          sessionId,
          caps,
          serverDetails,
          defaultOpts,
          _helpers$getChromePkg,
          pkg,
          activity,
          _ref3,

      // get device udid for this session
      udid,
          emPort,
          networkSpeed,
          args$2$0 = arguments;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;

            for (_len = args$2$0.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = args$2$0[_key];
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidDriver.prototype), 'createSession', this).apply(this, args));

          case 4:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            sessionId = _ref2[0];
            caps = _ref2[1];
            serverDetails = { platform: 'LINUX',
              webStorageEnabled: false,
              takesScreenshot: true,
              javascriptEnabled: true,
              databaseEnabled: false,
              networkConnectionEnabled: true,
              locationContextEnabled: false,
              warnings: {},
              desired: this.caps };

            this.caps = _Object$assign(serverDetails, this.caps);

            // assigning defaults
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.tempDir.staticDir());

          case 12:
            context$2$0.t0 = context$2$0.sent;
            context$2$0.t1 = _appiumAdb.DEFAULT_ADB_PORT;
            defaultOpts = {
              action: "android.intent.action.MAIN",
              category: "android.intent.category.LAUNCHER",
              flags: "0x10200000",
              disableAndroidWatchers: false,
              tmpDir: context$2$0.t0,
              fullReset: false,
              autoLaunch: true,
              adbPort: context$2$0.t1,
              androidInstallTimeout: 90000
            };

            _lodash2['default'].defaults(this.opts, defaultOpts);

            if (this.opts.javaVersion) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].getJavaVersion());

          case 19:
            this.opts.javaVersion = context$2$0.sent;

          case 20:
            this.useUnlockHelperApp = _lodash2['default'].isUndefined(this.caps.unlockType);

            // not user visible via caps
            if (this.opts.noReset === true) {
              this.opts.fullReset = false;
            }
            if (this.opts.fullReset === true) {
              this.opts.noReset = false;
            }
            this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
            this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

            this.curContext = this.defaultContextName();

            if (this.isChromeSession) {
              _logger2['default'].info("We're going to run a Chrome-based session");
              _helpers$getChromePkg = _androidHelpers2['default'].getChromePkg(this.opts.browserName);
              pkg = _helpers$getChromePkg.pkg;
              activity = _helpers$getChromePkg.activity;

              this.opts.appPackage = pkg;
              this.opts.appActivity = activity;
              _logger2['default'].info('Chrome-type package and activity are ' + pkg + ' and ' + activity);
            }

            if (this.opts.nativeWebScreenshot) {
              this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
            }

            if (this.opts.reboot) {
              this.setAvdFromCapabilities(caps);
            }context$2$0.next = 31;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].getDeviceInfoFromCaps(this.opts));

          case 31:
            _ref3 = context$2$0.sent;
            udid = _ref3.udid;
            emPort = _ref3.emPort;

            this.opts.udid = udid;
            this.opts.emPort = emPort;

            // set up an instance of ADB
            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].createADB({
              javaVersion: this.opts.javaVersion,
              udid: this.opts.udid,
              emPort: this.opts.emPort,
              adbPort: this.opts.adbPort,
              suppressKillServer: this.opts.suppressKillServer,
              remoteAdbHost: this.opts.remoteAdbHost,
              clearDeviceLogsOnStart: this.opts.clearDeviceLogsOnStart,
              adbExecTimeout: this.opts.adbExecTimeout
            }));

          case 38:
            this.adb = context$2$0.sent;
            context$2$0.next = 41;
            return _regeneratorRuntime.awrap(this.adb.getApiLevel());

          case 41:
            context$2$0.t2 = context$2$0.sent;

            if (!(context$2$0.t2 >= 23)) {
              context$2$0.next = 44;
              break;
            }

            _logger2['default'].warn("Consider setting 'automationName' capability to " + "'uiautomator2' on Android >= 6, since UIAutomator framework " + "is not maintained anymore by the OS vendor.");

          case 44:

            if (this.helpers.isPackageOrBundle(this.opts.app)) {
              // user provided package instead of app for 'app' capability, massage options
              this.opts.appPackage = this.opts.app;
              this.opts.app = null;
            }

            if (!this.opts.app) {
              context$2$0.next = 54;
              break;
            }

            context$2$0.next = 48;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, APP_EXTENSION));

          case 48:
            this.opts.app = context$2$0.sent;

            this.opts.appIsTemp = caps.app !== this.opts.app; // did we make a temporary copy?
            context$2$0.next = 52;
            return _regeneratorRuntime.awrap(this.checkAppPresent());

          case 52:
            context$2$0.next = 58;
            break;

          case 54:
            if (!this.appOnDevice) {
              context$2$0.next = 58;
              break;
            }

            // the app isn't an actual app file but rather something we want to
            // assume is on the device and just launch via the appPackage
            _logger2['default'].info('App file was not listed, instead we\'re going to run ' + (this.opts.appPackage + ' directly on the device'));
            context$2$0.next = 58;
            return _regeneratorRuntime.awrap(this.checkPackagePresent());

          case 58:
            if (!_appiumSupport.util.hasValue(this.opts.networkSpeed)) {
              context$2$0.next = 66;
              break;
            }

            if (this.isEmulator()) {
              context$2$0.next = 63;
              break;
            }

            _logger2['default'].warn("Sorry, networkSpeed capability is only available for emulators");
            context$2$0.next = 66;
            break;

          case 63:
            networkSpeed = _androidHelpers2['default'].ensureNetworkSpeed(this.adb, this.opts.networkSpeed);
            context$2$0.next = 66;
            return _regeneratorRuntime.awrap(this.adb.networkSpeed(networkSpeed));

          case 66:
            if (!_appiumSupport.util.hasValue(this.opts.gpsEnabled)) {
              context$2$0.next = 74;
              break;
            }

            if (!this.isEmulator()) {
              context$2$0.next = 73;
              break;
            }

            _logger2['default'].info('Trying to ' + (this.opts.gpsEnabled ? "enable" : "disable") + ' gps location provider');
            context$2$0.next = 71;
            return _regeneratorRuntime.awrap(this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled));

          case 71:
            context$2$0.next = 74;
            break;

          case 73:
            _logger2['default'].warn('Sorry! gpsEnabled capability is only available for emulators');

          case 74:
            context$2$0.next = 76;
            return _regeneratorRuntime.awrap(this.startAndroidSession(this.opts));

          case 76:
            return context$2$0.abrupt('return', [sessionId, this.caps]);

          case 79:
            context$2$0.prev = 79;
            context$2$0.t3 = context$2$0['catch'](0);
            context$2$0.prev = 81;
            context$2$0.next = 84;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 84:
            context$2$0.next = 88;
            break;

          case 86:
            context$2$0.prev = 86;
            context$2$0.t4 = context$2$0['catch'](81);

          case 88:
            throw context$2$0.t3;

          case 89:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 79], [81, 86]]);
    }
  }, {
    key: 'isEmulator',
    value: function isEmulator() {
      return !!(this.opts.avd || /emulator/.test(this.opts.udid));
    }
  }, {
    key: 'setAvdFromCapabilities',
    value: function setAvdFromCapabilities(caps) {
      if (this.opts.avd) {
        _logger2['default'].info('avd name defined, ignoring device name and platform version');
      } else {
        if (!caps.deviceName) {
          _logger2['default'].errorAndThrow('avd or deviceName should be specified when reboot option is enables');
        }
        if (!caps.platformVersion) {
          _logger2['default'].errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
        }
        var avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
        this.opts.avd = avdDevice + '__' + caps.platformVersion;
      }
    }
  }, {
    key: 'onSettingsUpdate',
    value: function onSettingsUpdate(key, value) {
      return _regeneratorRuntime.async(function onSettingsUpdate$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(key === "ignoreUnimportantViews")) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.setCompressedLayoutHierarchy(value));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startAndroidSession',
    value: function startAndroidSession() {
      return _regeneratorRuntime.async(function startAndroidSession$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Starting Android session');
            // set up the device to run on (real or emulator, etc)
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].initDevice(this.adb, this.opts));

          case 3:
            this.defaultIME = context$2$0.sent;

            // set actual device name, udid, platform version, screen size, model and manufacturer details
            this.caps.deviceName = this.adb.curDeviceId;
            this.caps.deviceUDID = this.opts.udid;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.adb.getPlatformVersion());

          case 8:
            this.caps.platformVersion = context$2$0.sent;
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.adb.getScreenSize());

          case 11:
            this.caps.deviceScreenSize = context$2$0.sent;
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.adb.getModel());

          case 14:
            this.caps.deviceModel = context$2$0.sent;
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.adb.getManufacturer());

          case 17:
            this.caps.deviceManufacturer = context$2$0.sent;

            if (!this.opts.autoLaunch) {
              context$2$0.next = 21;
              break;
            }

            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.initAUT());

          case 21:
            // start UiAutomator
            this.bootstrap = new _androidHelpers2['default'].bootstrap(this.adb, this.bootstrapPort, this.opts.websocket);
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts));

          case 24:
            // handling unexpected shutdown
            this.bootstrap.onUnexpectedShutdown['catch'](function callee$2$0(err) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (this.bootstrap.ignoreUnexpectedShutdown) {
                      context$3$0.next = 3;
                      break;
                    }

                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(err));

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            });

            if (this.opts.skipUnlock) {
              context$2$0.next = 28;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].unlock(this, this.adb, this.caps));

          case 28:
            if (!this.opts.ignoreUnimportantViews) {
              context$2$0.next = 31;
              break;
            }

            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.settings.update({ ignoreUnimportantViews: this.opts.ignoreUnimportantViews }));

          case 31:
            if (!this.isChromeSession) {
              context$2$0.next = 36;
              break;
            }

            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.startChromeSession());

          case 34:
            context$2$0.next = 39;
            break;

          case 36:
            if (!this.opts.autoLaunch) {
              context$2$0.next = 39;
              break;
            }

            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(this.startAUT());

          case 39:
            if (!_appiumSupport.util.hasValue(this.opts.orientation)) {
              context$2$0.next = 43;
              break;
            }

            _logger2['default'].debug('Setting initial orientation to \'' + this.opts.orientation + '\'');
            context$2$0.next = 43;
            return _regeneratorRuntime.awrap(this.setOrientation(this.opts.orientation));

          case 43:
            context$2$0.next = 45;
            return _regeneratorRuntime.awrap(this.initAutoWebview());

          case 45:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initAutoWebview',
    value: function initAutoWebview() {
      return _regeneratorRuntime.async(function initAutoWebview$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.autoWebview) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var viewName, timeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    viewName = this.defaultWebviewName();
                    timeout = this.opts.autoWebviewTimeout || 2000;

                    _logger2['default'].info('Setting auto webview to context \'' + viewName + '\' with timeout ' + timeout + 'ms');

                    // try every 500ms until timeout is over
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(timeout / 500, 500, function callee$3$0() {
                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.next = 2;
                            return _regeneratorRuntime.awrap(this.setContext(viewName));

                          case 2:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this2);
                    }));

                  case 5:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3);
            })());

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initAUT',
    value: function initAUT() {
      var launchInfo, otherApps;
      return _regeneratorRuntime.async(function initAUT$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].getLaunchInfo(this.adb, this.opts));

          case 2:
            launchInfo = context$2$0.sent;

            _Object$assign(this.opts, launchInfo);
            _Object$assign(this.caps, launchInfo);

            // Install any "otherApps" that were specified in caps

            if (!this.opts.otherApps) {
              context$2$0.next = 13;
              break;
            }

            otherApps = undefined;

            try {
              otherApps = _androidHelpers2['default'].parseArray(this.opts.otherApps);
            } catch (e) {
              _logger2['default'].errorAndThrow('Could not parse "otherApps" capability: ' + e.message);
            }
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(otherApps.map(function (app) {
              return _this4.helpers.configureApp(app, APP_EXTENSION);
            })));

          case 10:
            otherApps = context$2$0.sent;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].installOtherApks(otherApps, this.adb, this.opts));

          case 13:
            if (this.opts.app) {
              context$2$0.next = 20;
              break;
            }

            if (this.opts.fullReset) {
              _logger2['default'].errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
            }
            _logger2['default'].debug('No app capability. Assuming it is already on the device');

            if (!this.opts.fastReset) {
              context$2$0.next = 19;
              break;
            }

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].resetApp(this.adb, this.opts));

          case 19:
            return context$2$0.abrupt('return');

          case 20:
            if (this.opts.skipUninstall) {
              context$2$0.next = 23;
              break;
            }

            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 23:
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].installApk(this.adb, this.opts));

          case 25:
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].pushStrings(this.opts.language, this.adb, this.opts));

          case 27:
            this.apkStrings[this.opts.language] = context$2$0.sent;

            if (_lodash2['default'].isUndefined(this.opts.sharedPreferences)) {
              context$2$0.next = 31;
              break;
            }

            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.setSharedPreferences(this.opts));

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAppPresent',
    value: function checkAppPresent() {
      return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Checking whether app is actually present");
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find app apk at ' + this.opts.app);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkPackagePresent',
    value: function checkPackagePresent() {
      return _regeneratorRuntime.async(function checkPackagePresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Checking whether package is present on the device");
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.shell(['pm', 'list', 'packages', this.opts.appPackage]));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find package ' + this.opts.appPackage + ' on the device');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // Set CompressedLayoutHierarchy on the device
  }, {
    key: 'setCompressedLayoutHierarchy',
    value: function setCompressedLayoutHierarchy(compress) {
      return _regeneratorRuntime.async(function setCompressedLayoutHierarchy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.bootstrap.sendAction("compressedLayoutHierarchy", { compressLayout: compress }));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      var avdName;
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Shutting down Android driver");
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_androidHelpers2['default'].removeAllSessionWebSocketHandlers(this.server, this.sessionId));

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidDriver.prototype), 'deleteSession', this).call(this));

          case 5:
            if (!this.bootstrap) {
              context$2$0.next = 25;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.stopChromedriverProxies());

          case 8:
            if (!(this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME)) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Resetting IME to ' + this.defaultIME);
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.setIME(this.defaultIME));

          case 12:
            if (this.isChromeSession) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.adb.goToHome());

          case 17:
            if (!(this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice)) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 20:
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.bootstrap.shutdown());

          case 22:
            this.bootstrap = null;
            context$2$0.next = 26;
            break;

          case 25:
            _logger2['default'].debug("Called deleteSession but bootstrap wasn't active");

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.adb.stopLogcat());

          case 28:
            if (!this.useUnlockHelperApp) {
              context$2$0.next = 31;
              break;
            }

            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.adb.forceStop('io.appium.unlock'));

          case 31:
            if (!this.opts.reboot) {
              context$2$0.next = 36;
              break;
            }

            avdName = this.opts.avd.replace('@', '');

            _logger2['default'].debug('closing emulator \'' + avdName + '\'');
            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(this.adb.killEmulator(avdName));

          case 36:
            if (!this.opts.clearSystemFiles) {
              context$2$0.next = 52;
              break;
            }

            if (!this.opts.appIsTemp) {
              context$2$0.next = 49;
              break;
            }

            _logger2['default'].debug('Temporary copy of app was made: deleting \'' + this.opts.app + '\'');
            context$2$0.prev = 39;
            context$2$0.next = 42;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this.opts.app));

          case 42:
            context$2$0.next = 47;
            break;

          case 44:
            context$2$0.prev = 44;
            context$2$0.t0 = context$2$0['catch'](39);

            _logger2['default'].warn('Unable to delete temporary app: ' + context$2$0.t0.message);

          case 47:
            context$2$0.next = 50;
            break;

          case 49:
            _logger2['default'].debug('App was not copied, so not deleting');

          case 50:
            context$2$0.next = 53;
            break;

          case 52:
            _logger2['default'].debug('Not cleaning generated files. Add `clearSystemFiles` capability if wanted.');

          case 53:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[39, 44]]);
    }
  }, {
    key: 'setSharedPreferences',
    value: function setSharedPreferences() {
      var sharedPrefs, name, remotePath, remoteFile, localPath, builder;
      return _regeneratorRuntime.async(function setSharedPreferences$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            sharedPrefs = this.opts.sharedPreferences;

            _logger2['default'].info("Trying to set shared preferences");
            name = sharedPrefs.name;

            if (!_lodash2['default'].isUndefined(name)) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].warn('Skipping setting Shared preferences, name is undefined: ' + JSON.stringify(sharedPrefs));
            return context$2$0.abrupt('return', false);

          case 6:
            remotePath = '/data/data/' + this.opts.appPackage + '/shared_prefs';
            remoteFile = remotePath + '/' + name + '.xml';
            localPath = '/tmp/' + name + '.xml';
            builder = this.getPrefsBuilder();

            builder.build(sharedPrefs.prefs);
            _logger2['default'].info('Creating temporary shared preferences: ' + localPath);
            builder.toFile(localPath);
            _logger2['default'].info('Creating shared_prefs remote folder: ' + remotePath);
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.adb.shell(['mkdir', '-p', remotePath]));

          case 16:
            _logger2['default'].info('Pushing shared_prefs to ' + remoteFile);
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.adb.push(localPath, remoteFile));

          case 19:
            context$2$0.prev = 19;

            _logger2['default'].info('Trying to remove shared preferences temporary file');
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localPath));

          case 23:
            if (!context$2$0.sent) {
              context$2$0.next = 26;
              break;
            }

            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localPath));

          case 26:
            context$2$0.next = 31;
            break;

          case 28:
            context$2$0.prev = 28;
            context$2$0.t0 = context$2$0['catch'](19);

            _logger2['default'].warn('Error trying to remove temporary file ' + localPath);

          case 31:
            return context$2$0.abrupt('return', true);

          case 32:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[19, 28]]);
    }
  }, {
    key: 'getPrefsBuilder',
    value: function getPrefsBuilder() {
      /* Add this method to create a new SharedPrefsBuilder instead of
       * directly creating the object on setSharedPreferences for testing purposes
      */
      return new _sharedPreferencesBuilder.SharedPrefsBuilder();
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      if (!_get(Object.getPrototypeOf(AndroidDriver.prototype), 'validateDesiredCaps', this).call(this, caps)) {
        return false;
      }
      return _androidHelpers2['default'].validateDesiredCaps(caps);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive(sessionId) {
      _get(Object.getPrototypeOf(AndroidDriver.prototype), 'proxyActive', this).call(this, sessionId);

      return this.jwpProxyActive;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList(sessionId) {
      _get(Object.getPrototypeOf(AndroidDriver.prototype), 'getProxyAvoidList', this).call(this, sessionId);

      return this.jwpProxyAvoid;
    }
  }, {
    key: 'canProxy',
    value: function canProxy(sessionId) {
      _get(Object.getPrototypeOf(AndroidDriver.prototype), 'canProxy', this).call(this, sessionId);

      // this will change depending on ChromeDriver status
      return _lodash2['default'].isFunction(this.proxyReqRes);
    }
  }, {
    key: 'appOnDevice',
    get: function get() {
      return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
    }
  }, {
    key: 'isChromeSession',
    get: function get() {
      return _androidHelpers2['default'].isChromeBrowser(this.opts.browserName);
    }
  }]);

  return AndroidDriver;
})(_appiumBaseDriver.BaseDriver);

exports['default'] = AndroidDriver;
module.exports = exports['default'];

// the whole createSession flow is surrounded in a try-catch statement
// if creating a session fails at any point, we teardown everything we
// set up before throwing the error.

// find and copy, or download and unzip an app url or path

// Some cloud services using appium launch the avd themselves, so we ensure netspeed
// is set for emulators by calling adb.networkSpeed before running the app

// check if we have to enable/disable gps before running the application

// ignoring delete session exception if any and throw the real error
// that happened while creating the session.

// If the user sets autoLaunch to false, they are responsible for initAUT() and startAUT()

// set up app under test
// eslint-disable-line promise/prefer-await-to-callbacks

// Let's try to unlock the device

// Set CompressedLayoutHierarchy on the device based on current settings object
// this has to happen _after_ bootstrap is initialized

// start a chromedriver session and proxy to it

// start app

// populate appPackage, appActivity, appWaitPackage, appWaitActivity,
// and the device being used
// in the opts and caps (so it gets back to the user on session creation)

// install app

// This must run after installing the apk, otherwise it would cause the
// install to fail. And before running the app.

// certain cleanup we only care to do if the bootstrap was ever run

// some cleanup we want to do regardless, in case we are shutting down
// mid-startup
//# sourceMappingURL=data:application/json;charset=utf8;base64,
