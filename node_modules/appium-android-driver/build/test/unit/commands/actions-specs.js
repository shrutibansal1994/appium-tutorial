'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumSupport = require('appium-support');

var support = _interopRequireWildcard(_appiumSupport);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _libCommandsActions = require('../../../lib/commands/actions');

var _libCommandsActions2 = _interopRequireDefault(_libCommandsActions);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var driver = undefined;
var sandbox = _sinon2['default'].createSandbox();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Actions', function () {
  beforeEach(function () {
    driver = new _2['default']();
    driver.adb = new _appiumAdb2['default']();
    driver.bootstrap = new _appiumAndroidBootstrap2['default']();
    sandbox.stub(driver.bootstrap, 'sendAction');
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('keyevent', function () {
    it('shoudle be able to execute keyevent via pressKeyCode', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'pressKeyCode');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.keyevent('66', 'meta'));

          case 3:
            driver.pressKeyCode.calledWithExactly('66', 'meta').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'pressKeyCode');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.keyevent('66'));

          case 3:
            driver.pressKeyCode.calledWithExactly('66', null).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pressKeyCode', function () {
    it('shoudle be able to press key code', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.pressKeyCode('66', 'meta'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('pressKeyCode', { keycode: '66', metastate: 'meta' }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.pressKeyCode('66'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('pressKeyCode', { keycode: '66', metastate: null }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('longPressKeyCode', function () {
    it('shoudle be able to press key code', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.longPressKeyCode('66', 'meta'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('longPressKeyCode', { keycode: '66', metastate: 'meta' }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.longPressKeyCode('66'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('longPressKeyCode', { keycode: '66', metastate: null }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getOrientation', function () {
    it('shoudle be able to get orientation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('orientation', { naturalOrientation: false }).returns('landscape');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getOrientation().should.become('LANDSCAPE'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('orientation', { naturalOrientation: false }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setOrientation', function () {
    it('shoudle be able to set orientation', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { orientation: 'SOMESCAPE', naturalOrientation: false };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setOrientation('somescape'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('orientation', opts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fakeFlick', function () {
    it('shoudle be able to do fake flick', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.fakeFlick(12, 34));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('flick', { xSpeed: 12, ySpeed: 34 }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fakeFlickElement', function () {
    it('shoudle be able to do fake flick on element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.fakeFlickElement(5000, 56, 78, 1.32));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('element:flick', { xoffset: 56, yoffset: 78, speed: 1.32, elementId: 5000 }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('swipe', function () {
    it('should swipe an element', function () {
      var swipeOpts = { startX: 10, startY: 11, endX: 20, endY: 22,
        steps: 3, elementId: 'someElementId' };
      driver.swipe(10, 11, 20, 22, 0.1, null, 'someElementId');
      driver.bootstrap.sendAction.calledWithExactly('element:swipe', swipeOpts).should.be['true'];
    });
    it('should swipe without an element', function () {
      driver.swipe(0, 0, 1, 1, 0, 1);
      driver.bootstrap.sendAction.calledWith('swipe').should.be['true'];
    });
    it('should set start point to (0.5;0.5) if startX and startY are "null"', function callee$2$0() {
      var swipeOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            swipeOpts = { startX: 0.5, startY: 0.5, endX: 0, endY: 0, steps: 0 };

            sandbox.stub(driver, 'doSwipe');
            driver.swipe('null', 'null', 0, 0, 0);
            driver.doSwipe.calledWithExactly(swipeOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pinchClose', function () {
    it('should be able to pinch in element', function callee$2$0() {
      var pinchOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pinchOpts = { direction: 'in', elementId: 'el01', percent: 0.5, steps: 5 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.pinchClose(null, null, null, null, null, 0.5, 5, 'el01'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:pinch', pinchOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pinchOpen', function () {
    it('should be able to pinch out element', function callee$2$0() {
      var pinchOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pinchOpts = { direction: 'out', elementId: 'el01', percent: 0.5, steps: 5 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.pinchOpen(null, null, null, null, null, 0.5, 5, 'el01'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:pinch', pinchOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('flick', function () {
    it('should call fakeFlickElement if element is passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'fakeFlickElement');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.flick('elem', null, null, 1, 2, 3));

          case 3:
            driver.fakeFlickElement.calledWith('elem', 1, 2, 3).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call fakeFlick if element is not passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'fakeFlick');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.flick(null, 1, 2));

          case 3:
            driver.fakeFlick.calledWith(1, 2).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('drag', function () {
    var dragOpts = {
      elementId: 'elem1', destElId: 'elem2',
      startX: 1, startY: 2, endX: 3, endY: 4, steps: 1
    };
    it('should drag an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.drag(1, 2, 3, 4, 0.02, null, 'elem1', 'elem2');
            driver.bootstrap.sendAction.calledWithExactly('element:drag', dragOpts).should.be['true'];

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should drag without an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            dragOpts.elementId = null;
            driver.drag(1, 2, 3, 4, 0.02, null, null, 'elem2');
            driver.bootstrap.sendAction.calledWithExactly('drag', dragOpts).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('lock', function () {
    it('should call adb.lock()', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'lock');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.lock());

          case 3:
            driver.adb.lock.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isLocked', function () {
    it('should call adb.isScreenLocked()', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'isScreenLocked').returns('lock_status');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isLocked().should.become('lock_status'));

          case 3:
            driver.adb.isScreenLocked.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('openNotifications', function () {
    it('should be able to open notifications', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.openNotifications());

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('openNotification').should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setLocation', function () {
    it('should be able to set location', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendTelnetCommand');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setLocation('lat', 'long'));

          case 3:
            driver.adb.sendTelnetCommand.calledWithExactly('geo fix long lat').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pullFile', function () {
    it('should be able to pull file from device', function callee$2$0() {
      var localFile;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'pull');
            sandbox.stub(support.fs, 'readFile').withArgs(localFile).returns('appium');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.pullFile('remote_path').should.become('YXBwaXVt'));

          case 8:
            driver.adb.pull.calledWithExactly('remote_path', localFile).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to pull file located in application container from the device', function callee$2$0() {
      var localFile, packageId, remotePath, tmpPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            packageId = 'com.myapp';
            remotePath = 'path/in/container';
            tmpPath = '/data/local/tmp/container';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'pull');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'readFile').withArgs(localFile).returns('appium');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.pullFile('@' + packageId + '/' + remotePath).should.become('YXBwaXVt'));

          case 12:
            driver.adb.pull.calledWithExactly(tmpPath, localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'chmod 777 \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['cp', '-f', '/data/data/' + packageId + '/' + remotePath, tmpPath]).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['rm', '-f', tmpPath]).should.be['true'];

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('pushFile', function () {
    it('should be able to push file to device', function callee$2$0() {
      var localFile, content;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            content = 'appium';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'push');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'writeFile');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.pushFile('remote_path', 'YXBwaXVt'));

          case 10:
            support.fs.writeFile.calledWithExactly(localFile, content, 'binary').should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.push.calledWithExactly(localFile, 'remote_path').should.be['true'];

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to push file located in application container to the device', function callee$2$0() {
      var localFile, content, packageId, remotePath, tmpPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            content = 'appium';
            packageId = 'com.myapp';
            remotePath = 'path/in/container';
            tmpPath = '/data/local/tmp/container';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'push');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'writeFile');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.pushFile('@' + packageId + '/' + remotePath, 'YXBwaXVt'));

          case 13:
            support.fs.writeFile.calledWithExactly(localFile, content, 'binary').should.be['true'];
            driver.adb.push.calledWithExactly(localFile, tmpPath).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'mkdir -p \'/data/data/' + packageId + '/path/in\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'touch \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'chmod 777 \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['cp', '-f', tmpPath, '/data/data/' + packageId + '/' + remotePath]).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['rm', '-f', tmpPath]).should.be['true'];

          case 21:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pullFolder', function () {
    var zippedDir = '/mock/path/to/zipped';
    var unzippedDir = '/mock/path/to/unzipped';
    var tempDir = '/mock/path/to/temp-dir';
    var tempPathStub = undefined;

    before(function () {
      var _mockFS;

      // Create in-memory mock file system for file writes
      (0, _mockFs2['default'])((_mockFS = {}, _defineProperty(_mockFS, zippedDir, {}), _defineProperty(_mockFS, unzippedDir, {}), _defineProperty(_mockFS, tempDir, {}), _mockFS));

      // Stub temp.path to use an in-memory filepath
      tempPathStub = _sinon2['default'].stub(_temp2['default'], 'path').returns(tempDir);
    });

    after(function () {
      tempPathStub.restore();
      _mockFs2['default'].restore();
    });

    it('should pull a folder and return base64 zip', function callee$2$0() {
      var adbPullStub, pull, zippedBase64;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adbPullStub = undefined;

            pull = function pull(ignore, localPath) {
              return _regeneratorRuntime.async(function pull$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(localPath, 'a.txt'), 'hello world', { flags: 'w' }));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(localPath, 'b.txt'), 'foobar', { flags: 'w' }));

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            };

            if (!driver.adb) {
              driver.adb = { pull: pull };
            } else {
              adbPullStub = _sinon2['default'].stub(driver.adb, 'pull').callsFake(pull);
            }

            // Call 'driver.pullFolder' and zip the base64 contents to a .zip file
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.pullFolder('/does/not/matter'));

          case 5:
            zippedBase64 = context$3$0.sent;

            (typeof zippedBase64).should.equal('string');
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(zippedDir, 'zipped.zip'), zippedBase64, { encoding: 'base64', flags: 'w' }));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(support.zip.extractAllTo(_path2['default'].resolve(zippedDir, 'zipped.zip'), unzippedDir));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(support.fs.readFile(_path2['default'].resolve(unzippedDir, 'a.txt'), 'utf8').should.eventually.equal('hello world'));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(support.fs.readFile(_path2['default'].resolve(unzippedDir, 'b.txt'), 'utf8').should.eventually.equal('foobar'));

          case 15:

            // Restore stub
            if (adbPullStub) {
              adbPullStub.restore();
            } else {
              delete driver.adb;
            }

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fingerprint', function () {
    it('should call fingerprint adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'fingerprint');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.fingerprint(1111));

          case 4:
            driver.adb.fingerprint.calledWithExactly(1111).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'fingerprint');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.fingerprint(1111).should.be.rejectedWith('fingerprint method is only available for emulators'));

          case 4:
            driver.adb.fingerprint.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('sendSMS', function () {
    it('should call sendSMS adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendSMS');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.sendSMS(4509, 'Hello Appium'));

          case 4:
            driver.adb.sendSMS.calledWithExactly(4509, 'Hello Appium').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendSMS');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.sendSMS(4509, 'Hello Appium').should.be.rejectedWith('sendSMS method is only available for emulators'));

          case 4:
            driver.adb.sendSMS.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmCall', function () {
    it('should call gsmCall adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmCall');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmCall(4509, 'call'));

          case 4:
            driver.adb.gsmCall.calledWithExactly(4509, 'call').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmCall');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmCall(4509, 'call').should.be.rejectedWith('gsmCall method is only available for emulators'));

          case 4:
            driver.adb.gsmCall.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmSignal', function () {
    it('should call gsmSignal adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmSignal');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmSignal(3));

          case 4:
            driver.adb.gsmSignal.calledWithExactly(3).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmSignal');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmSignal(3).should.be.rejectedWith('gsmSignal method is only available for emulators'));

          case 4:
            driver.adb.gsmSignal.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmVoice', function () {
    it('should call gsmVoice adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmVoice');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmVoice('roaming'));

          case 4:
            driver.adb.gsmVoice.calledWithExactly('roaming').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmVoice');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmVoice('roaming').should.be.rejectedWith('gsmVoice method is only available for emulators'));

          case 4:
            driver.adb.gsmVoice.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('powerAC', function () {
    it('should call powerAC adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerAC');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerAC('off'));

          case 4:
            driver.adb.powerAC.calledWithExactly('off').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerAC');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerAC('roaming').should.be.rejectedWith('powerAC method is only available for emulators'));

          case 4:
            driver.adb.powerAC.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('powerCapacity', function () {
    it('should call powerCapacity adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerCapacity');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerCapacity(5));

          case 4:
            driver.adb.powerCapacity.calledWithExactly(5).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerCapacity');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerCapacity(5).should.be.rejectedWith('powerCapacity method is only available for emulators'));

          case 4:
            driver.adb.powerCapacity.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('networkSpeed', function () {
    it('should call networkSpeed adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'networkSpeed');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.networkSpeed('gsm'));

          case 4:
            driver.adb.networkSpeed.calledWithExactly('gsm').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'networkSpeed');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.networkSpeed('gsm').should.be.rejectedWith('networkSpeed method is only available for emulators'));

          case 4:
            driver.adb.networkSpeed.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshotDataWithAdbShell', function () {
    var defaultDir = '/data/local/tmp/';
    var png = '/path/sc.png';
    var localFile = 'local_file';
    beforeEach(function () {
      sandbox.stub(_temp2['default'], 'path');
      sandbox.stub(support.fs, 'exists');
      sandbox.stub(support.fs, 'unlink');
      sandbox.stub(driver.adb, 'shell');
      sandbox.stub(driver.adb, 'pull');
      sandbox.stub(_path2['default'].posix, 'resolve');
      sandbox.stub(_jimp2['default'], 'read');
      sandbox.stub(driver.adb, 'fileSize');
      _temp2['default'].path.returns(localFile);
      support.fs.exists.withArgs(localFile).returns(true);
      support.fs.unlink.withArgs(localFile).returns(true);
      _path2['default'].posix.resolve.withArgs(defaultDir, 'screenshot.png').returns(png);
      driver.adb.fileSize.withArgs(png).returns(1);
      _jimp2['default'].read.withArgs(localFile).returns('screenshoot_context');
    });
    it('should be able to get screenshot via adb shell', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, {}).should.become('screenshoot_context'));

          case 2:
            driver.adb.shell.calledWithExactly(['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png]).should.be['true'];
            driver.adb.pull.calledWithExactly(png, localFile).should.be['true'];
            _jimp2['default'].read.calledWithExactly(localFile).should.be['true'];
            support.fs.exists.calledTwice.should.be['true'];
            support.fs.unlink.calledTwice.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be possible to change default png dir', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _path2['default'].posix.resolve.withArgs('/custom/path/tmp/', 'screenshot.png').returns(png);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, { androidScreenshotPath: '/custom/path/tmp/' }).should.become('screenshoot_context'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if size of the screenshot is zero', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.fileSize.withArgs(png).returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, {}).should.be.rejectedWith('equals to zero'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshotDataWithAdbExecOut', function () {
    it('should be able to take screenshot via exec-out', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            sandbox.stub(_jimp2['default'], 'read');
            teen_process.exec.returns({ stdout: 'stdout', stderr: '' });
            driver.adb.executable.path = 'path/to/adb';
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb));

          case 6:
            teen_process.exec.calledWithExactly(driver.adb.executable.path, driver.adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), { encoding: 'binary', isBuffer: true }).should.be['true'];
            _jimp2['default'].read.calledWithExactly('stdout').should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if size of the screenshot is zero', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ stdout: '', stderr: '' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned no data'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if code is not 0', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ code: 1, stdout: '', stderr: '' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned error, code: \'1\', stderr: \'\''));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if stderr is not empty', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ code: 0, stdout: '', stderr: 'Oops' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned error, code: \'0\', stderr: \'Oops\''));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshot', function () {
    var image = undefined;
    beforeEach(function () {
      image = new _jimp2['default'](1, 1);
      sandbox.stub(driver.adb, 'getApiLevel');
      sandbox.stub(driver.adb, 'getScreenOrientation');
      sandbox.stub(driver, 'getScreenshotDataWithAdbExecOut');
      sandbox.stub(driver, 'getScreenshotDataWithAdbShell');
      sandbox.stub(image, 'getBuffer').callsFake(function (mime, cb) {
        // eslint-disable-line promise/prefer-await-to-callbacks
        return cb.call(this, null, Buffer.from('appium'));
      });
      sandbox.stub(image, 'rotate');
      driver.adb.getScreenOrientation.returns(2);
      image.rotate.withArgs(-180).returns(image);
    });
    it('should be able to take screenshot via exec-out (API level > 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(24);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 4:
            driver.getScreenshotDataWithAdbExecOut.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbShell.notCalled.should.be['true'];
            image.getBuffer.calledWith(_jimp2['default'].MIME_PNG).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to take screenshot via adb shell (API level <= 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(20);
            driver.getScreenshotDataWithAdbShell.withArgs(driver.adb, driver.opts).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 4:
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbExecOut.notCalled.should.be['true'];
            image.getBuffer.calledWith(_jimp2['default'].MIME_PNG).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should tries to take screenshot via adb shell if exec-out failed (API level > 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(24);
            driver.getScreenshotDataWithAdbExecOut.throws();
            driver.getScreenshotDataWithAdbShell.withArgs(driver.adb, driver.opts).returns(image);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 5:
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if adb shell failed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(20);
            driver.getScreenshotDataWithAdbShell.throws();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.be.rejectedWith('Cannot get screenshot'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should rotate image if API level < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(22);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 4:
            driver.adb.getScreenOrientation.calledOnce.should.be['true'];
            image.rotate.calledOnce.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not rotate image if API level >= 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(23);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 4:
            driver.adb.getScreenOrientation.notCalled.should.be['true'];
            image.rotate.notCalled.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not throws error if rotate image failed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            image.rotate.resetBehavior();
            image.rotate.throws();
            driver.adb.getApiLevel.returns(22);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.be.fulfilled);

          case 6:
            image.rotate.threw().should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// Stub in driver.adb and make it pull a folder with two files

// Extract the zip file and verify it's contents
//# sourceMappingURL=data:application/json;charset=utf8;base64,
