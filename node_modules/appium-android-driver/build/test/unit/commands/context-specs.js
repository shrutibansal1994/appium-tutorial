'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _libWebviewHelpers = require('../../../lib/webview-helpers');

var _libWebviewHelpers2 = _interopRequireDefault(_libWebviewHelpers);

var _libCommandsContext = require('../../../lib/commands/context');

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumChromedriver = require('appium-chromedriver');

var _appiumChromedriver2 = _interopRequireDefault(_appiumChromedriver);

var _portfinder = require('portfinder');

var _portfinder2 = _interopRequireDefault(_portfinder);

var _appiumBaseDriver = require('appium-base-driver');

var driver = undefined;
var stubbedChromedriver = undefined;
var sandbox = _sinon2['default'].createSandbox();
var expect = _chai2['default'].expect;
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Context', function () {
  beforeEach(function () {
    sandbox.stub(_portfinder2['default'], 'getPort').callsFake(function (cb) {
      // eslint-disable-line promise/prefer-await-to-callbacks
      return cb(null, 4444); // eslint-disable-line promise/prefer-await-to-callbacks
    });
    driver = new _2['default']();
    driver.adb = sandbox.stub();
    driver.adb.curDeviceId = 'device_id';
    driver.adb.getAdbServerPort = sandbox.stub().returns(5555);
    sandbox.stub(_appiumChromedriver2['default'].prototype, 'restart');
    sandbox.stub(_appiumChromedriver2['default'].prototype, 'start');
    sandbox.stub(_appiumChromedriver2['default'].prototype.proxyReq, 'bind').returns('proxy');

    stubbedChromedriver = _sinon2['default'].stub();
    stubbedChromedriver.proxyReq = _sinon2['default'].stub();
    stubbedChromedriver.proxyReq.bind = _sinon2['default'].stub();
    stubbedChromedriver.restart = _sinon2['default'].stub();
    stubbedChromedriver.stop = sandbox.stub().throws();
    stubbedChromedriver.removeAllListeners = sandbox.stub();
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('getCurrentContext', function () {
    it('should return current context', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.curContext = 'current_context';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCurrentContext().should.become('current_context'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return NATIVE_APP if no context is set', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.curContext = null;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCurrentContext().should.become(_libWebviewHelpers.NATIVE_WIN));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getContexts', function () {
    it('should get Chromium context where appropriate', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ browserName: 'Chrome' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getContexts());

          case 3:
            context$3$0.t0 = context$3$0.sent;
            context$3$0.t1 = _libWebviewHelpers.CHROMIUM_WIN;
            expect(context$3$0.t0).to.include(context$3$0.t1);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use ADB to figure out which webviews are available', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(_libWebviewHelpers2['default'], 'getWebviews');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getContexts());

          case 3:
            context$3$0.t0 = context$3$0.sent;
            context$3$0.t1 = _libWebviewHelpers.CHROMIUM_WIN;
            expect(context$3$0.t0).to.not.include(context$3$0.t1);

            _libWebviewHelpers2['default'].getWebviews.calledOnce.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setContext', function () {
    beforeEach(function () {
      sandbox.stub(driver, 'getContexts').returns(['DEFAULT', 'WV', 'ANOTHER']);
      sandbox.stub(driver, 'switchContext');
    });
    it('should switch to default context if name is null', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'defaultContextName').returns('DEFAULT');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setContext(null));

          case 3:
            driver.switchContext.calledWithExactly('DEFAULT').should.be['true'];
            driver.curContext.should.be.equal('DEFAULT');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should switch to default web view if name is WEBVIEW', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'defaultWebviewName').returns('WV');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setContext(_libWebviewHelpers.WEBVIEW_WIN));

          case 3:
            driver.switchContext.calledWithExactly('WV').should.be['true'];
            driver.curContext.should.be.equal('WV');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if context does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setContext('fake').should.be.rejectedWith(_appiumBaseDriver.errors.NoSuchContextError));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not switch to context if already in it', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.curContext = 'ANOTHER';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setContext('ANOTHER'));

          case 3:
            driver.switchContext.notCalled.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('switchContext', function () {
    beforeEach(function () {
      sandbox.stub(driver, 'stopChromedriverProxies');
      sandbox.stub(driver, 'startChromedriverProxy');
      sandbox.stub(driver, 'suspendChromedriverProxy');
      sandbox.stub(driver, 'isChromedriverContext');
      driver.curContext = 'current_cntx';
    });
    it('should start chrome driver proxy if requested context is webview', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.isChromedriverContext.returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.switchContext('context'));

          case 3:
            driver.startChromedriverProxy.calledWithExactly('context').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should stop chromedriver proxy if current context is webview and requested context is not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { recreateChromeDriverSessions: true };
            driver.isChromedriverContext.withArgs('requested_cntx').returns(false);
            driver.isChromedriverContext.withArgs('current_cntx').returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.switchContext('requested_cntx'));

          case 5:
            driver.stopChromedriverProxies.calledOnce.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should suspend chrome driver proxy if current context is webview and requested context is not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { recreateChromeDriverSessions: false };
            driver.isChromedriverContext.withArgs('requested_cntx').returns(false);
            driver.isChromedriverContext.withArgs('current_cntx').returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.switchContext('requested_cntx'));

          case 5:
            driver.suspendChromedriverProxy.calledOnce.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if requested and current context are not webview', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.isChromedriverContext.withArgs('requested_cntx').returns(false);
            driver.isChromedriverContext.withArgs('current_cntx').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.switchContext('requested_cntx').should.be.rejectedWith(/switching to context/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('defaultContextName', function () {
    it('should return NATIVE_WIN', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.defaultContextName().should.be.equal(_libWebviewHelpers.NATIVE_WIN));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('defaultWebviewName', function () {
    it('should return WEBVIEW with package', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts = { appPackage: 'pkg' };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.defaultWebviewName().should.be.equal(_libWebviewHelpers.WEBVIEW_BASE + 'pkg'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isWebContext', function () {
    it('should return true if current context is not native', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.curContext = 'current_context';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isWebContext().should.be['true']);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('startChromedriverProxy', function () {
    beforeEach(function () {
      sandbox.stub(driver, 'onChromedriverStop');
    });
    it('should start new chromedriver session', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_1'));

          case 2:
            driver.sessionChromedrivers.WEBVIEW_1.should.be.equal(driver.chromedriver);
            driver.chromedriver.start.getCall(0).args[0].chromeOptions.androidDeviceSerial.should.be.equal('device_id');
            driver.chromedriver.proxyPort.should.be.equal(4444);
            driver.chromedriver.proxyReq.bind.calledWithExactly(driver.chromedriver);
            driver.proxyReqRes.should.be.equal('proxy');
            driver.jwpProxyActive.should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to extract package from context name', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts.appPackage = 'pkg';
            driver.opts.extractChromeAndroidPackageFromContextName = true;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_com.pkg'));

          case 4:
            driver.chromedriver.start.getCall(0).args[0].chromeOptions.should.be.deep.include({ androidPackage: 'com.pkg' });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use package from opts if package extracted from context is empty', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.opts.appPackage = 'pkg';
            driver.opts.extractChromeAndroidPackageFromContextName = true;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_'));

          case 4:
            driver.chromedriver.start.getCall(0).args[0].chromeOptions.should.be.deep.include({ androidPackage: 'pkg' });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should handle chromedriver event with STATE_STOPPED state', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_1'));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.chromedriver.emit(_appiumChromedriver2['default'].EVENT_CHANGED, { state: _appiumChromedriver2['default'].STATE_STOPPED }));

          case 4:
            driver.onChromedriverStop.calledWithExactly('WEBVIEW_1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should ignore events if status is not STATE_STOPPED', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_1'));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.chromedriver.emit(_appiumChromedriver2['default'].EVENT_CHANGED, { state: 'unhandled_state' }));

          case 4:
            driver.onChromedriverStop.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should reconnect if session already exists', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            stubbedChromedriver.hasWorkingWebview = _sinon2['default'].stub().returns(true);
            driver.sessionChromedrivers = { WEBVIEW_1: stubbedChromedriver };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_1'));

          case 4:
            driver.chromedriver.restart.notCalled.should.be['true'];
            driver.chromedriver.should.be.equal(stubbedChromedriver);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should restart if chromedriver has not working web view', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            stubbedChromedriver.hasWorkingWebview = _sinon2['default'].stub().returns(false);
            driver.sessionChromedrivers = { WEBVIEW_1: stubbedChromedriver };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startChromedriverProxy('WEBVIEW_1'));

          case 4:
            driver.chromedriver.restart.calledOnce.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('suspendChromedriverProxy', function () {
    it('should suspend chrome driver proxy', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.suspendChromedriverProxy());

          case 2:
            (driver.chromedriver == null).should.be['true'];
            (driver.proxyReqRes == null).should.be['true'];
            driver.jwpProxyActive.should.be['false'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('onChromedriverStop', function () {
    it('should call startUnexpectedShutdown if chromedriver in active context', function callee$2$0() {
      var arg0;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _sinon2['default'].stub(driver, 'startUnexpectedShutdown');
            driver.curContext = 'WEBVIEW_1';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.onChromedriverStop('WEBVIEW_1'));

          case 4:
            arg0 = driver.startUnexpectedShutdown.getCall(0).args[0];

            arg0.should.be.an('error');
            arg0.message.should.include('Chromedriver quit unexpectedly during session');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should delete session if chromedriver in non-active context', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.curContext = 'WEBVIEW_1';
            driver.sessionChromedrivers = { WEBVIEW_2: 'CHROMIUM' };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.onChromedriverStop('WEBVIEW_2'));

          case 4:
            driver.sessionChromedrivers.should.be.empty;

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('stopChromedriverProxies', function () {
    it('should stop all chromedriver', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.sessionChromedrivers = { WEBVIEW_1: stubbedChromedriver, WEBVIEW_2: stubbedChromedriver };
            sandbox.stub(driver, 'suspendChromedriverProxy');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.stopChromedriverProxies());

          case 4:
            driver.suspendChromedriverProxy.calledOnce.should.be['true'];
            stubbedChromedriver.removeAllListeners.calledWithExactly(_appiumChromedriver2['default'].EVENT_CHANGED).should.be['true'];
            stubbedChromedriver.removeAllListeners.calledTwice.should.be['true'];
            stubbedChromedriver.stop.calledTwice.should.be['true'];
            driver.sessionChromedrivers.should.be.empty;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isChromedriverContext', function () {
    it('should return true if context is webview or chromium', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.isChromedriverContext(_libWebviewHelpers.WEBVIEW_WIN + '_1').should.be['true']);

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.isChromedriverContext(_libWebviewHelpers.CHROMIUM_WIN).should.be['true']);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setupNewChromedriver', function () {
    it('should be able to set app package from chrome options', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ chromeOptions: { androidPackage: 'apkg' } }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidPackage.should.be.equal('apkg');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use prefixed chromeOptions', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({
              'goog:chromeOptions': {
                androidPackage: 'apkg'
              }
            }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidPackage.should.be.equal('apkg');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should merge chromeOptions', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({
              chromeOptions: {
                androidPackage: 'apkg'
              },
              'goog:chromeOptions': {
                androidWaitPackage: 'bpkg'
              },
              'appium:chromeOptions': {
                androidActivity: 'aact'
              }
            }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidPackage.should.be.equal('apkg');
            chromedriver.start.getCall(0).args[0].chromeOptions.androidActivity.should.be.equal('aact');
            chromedriver.start.getCall(0).args[0].chromeOptions.androidWaitPackage.should.be.equal('bpkg');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to set androidActivity chrome option', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ chromeAndroidActivity: 'act' }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidActivity.should.be.equal('act');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to set androidProcess chrome option', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ chromeAndroidProcess: 'proc' }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidProcess.should.be.equal('proc');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to set loggingPrefs capability', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ enablePerformanceLogging: true }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].loggingPrefs.should.deep.equal({ performance: 'ALL' });

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set androidActivity to appActivity if browser name is chromium-webview', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ browserName: 'chromium-webview',
              appActivity: 'app_act' }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].chromeOptions.androidActivity.should.be.equal('app_act');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to set loggingPrefs capability', function callee$2$0() {
      var chromedriver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libCommandsContext.setupNewChromedriver)({ pageLoadStrategy: "strategy" }));

          case 2:
            chromedriver = context$3$0.sent;

            chromedriver.start.getCall(0).args[0].pageLoadStrategy.should.be.equal("strategy");

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
