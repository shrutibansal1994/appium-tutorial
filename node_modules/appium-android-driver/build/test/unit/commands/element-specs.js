'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _libAndroidHelpers = require('../../../lib/android-helpers');

var _libAndroidHelpers2 = _interopRequireDefault(_libAndroidHelpers);

var driver = undefined;
var sandbox = _sinon2['default'].createSandbox();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Element', function () {
  beforeEach(function () {
    driver = new _2['default']();
    driver.adb = new _appiumAdb2['default']();
    driver.bootstrap = new _appiumAndroidBootstrap2['default']();
    sandbox.stub(driver.bootstrap, 'sendAction');
    sandbox.stub(_libAndroidHelpers2['default'], 'removeNullProperties');
    driver.opts = { unicodeKeyboard: true };
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('getAttribute', function () {
    it('should get element attribute', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('element:getAttribute').returns('attr_value');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getAttribute('attr', 'el1').should.become('attr_value'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:getAttribute', { attribute: 'attr', elementId: 'el1' }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getName', function () {
    it('should get element name', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('el_name');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getName('el1').should.become('el_name'));

          case 4:
            driver.getAttribute.calledWithExactly('className', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('elementDisplayed', function () {
    it('should return true if element displayed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('true');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementDisplayed('el1').should.become(true));

          case 4:
            driver.getAttribute.calledWithExactly('displayed', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return false if element not displayed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('false');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementDisplayed('el1').should.become(false));

          case 4:
            driver.getAttribute.calledWithExactly('displayed', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('elementEnabled', function () {
    it('should return true if element enabled', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('true');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementEnabled('el1').should.become(true));

          case 4:
            driver.getAttribute.calledWithExactly('enabled', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return false if element not enabled', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('false');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementEnabled('el1').should.become(false));

          case 4:
            driver.getAttribute.calledWithExactly('enabled', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('elementSelected', function () {
    it('should return true if element selected', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('true');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementSelected('el1').should.become(true));

          case 4:
            driver.getAttribute.calledWithExactly('selected', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return false if element not selected', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getAttribute');
            driver.getAttribute.returns('false');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementSelected('el1').should.become(false));

          case 4:
            driver.getAttribute.calledWithExactly('selected', 'el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setElementValue', function () {
    var params = { elementId: 'el0', text: 'text to set', replace: true,
      unicodeKeyboard: true };
    it('should call doSetElementValue', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'doSetElementValue');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setElementValue('text to set', 'el0', true));

          case 3:
            driver.doSetElementValue.calledWithExactly(params).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should join keys parameter if keys is instance of Array', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'doSetElementValue');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setElementValue(['t', 'ext', ' to ', 'se', 't'], 'el0', true));

          case 3:
            driver.doSetElementValue.calledWithExactly(params).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set replace to false by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params.replace = false;
            sandbox.stub(driver, 'doSetElementValue');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.setElementValue(['t', 'ext', ' to ', 'se', 't'], 'el0'));

          case 4:
            driver.doSetElementValue.calledWithExactly(params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('doSetElementValue', function () {
    it('should call setText to set element value', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.doSetElementValue('params'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('element:setText', 'params').should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setValue', function () {
    it('should call setElementValue to set value', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'setElementValue');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setValue('keys', 'el1'));

          case 3:
            driver.setElementValue.calledWithExactly('keys', 'el1', false).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('replaceValue', function () {
    it('should call setElementValue to replace value', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'setElementValue');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.replaceValue('keys', 'el1'));

          case 3:
            driver.setElementValue.calledWithExactly('keys', 'el1', true).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setValueImmediate', function () {
    it('should set value via adb inputText command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'click');
            sandbox.stub(driver.adb, 'inputText');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.setValueImmediate('keys', 'el1'));

          case 4:
            driver.click.calledWithExactly('el1').should.be['true'];
            driver.adb.inputText.calledWithExactly('keys').should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should join keys parameter if keys is instance of Array', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'click');
            sandbox.stub(driver.adb, 'inputText');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.setValueImmediate(['k', 'ey', 's'], 'el1'));

          case 4:
            driver.adb.inputText.calledWithExactly('keys').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getText', function () {
    it('should get element text', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('element:getText').returns('el_text');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getText('el1').should.become('el_text'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:getText', { elementId: 'el1' }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('clear', function () {
    it('should clear text of an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getText');
            sandbox.stub(driver, 'click');
            sandbox.stub(driver.adb, 'clearTextField');
            driver.getText.withArgs('el1').returns('#'.repeat(110));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.clear('el1'));

          case 6:
            driver.getText.calledWithExactly('el1').should.be['true'];
            driver.click.calledWithExactly('el1').should.be['true'];
            driver.adb.clearTextField.getCall(0).args[0].should.be.equal(50);
            driver.adb.clearTextField.getCall(1).args[0].should.be.equal(50);
            driver.adb.clearTextField.getCall(2).args[0].should.be.equal(10);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should do five retries and then fail if clearTextField throws error', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            this.timeout(10000);

            sandbox.stub(driver, 'getText');
            sandbox.stub(driver, 'click');
            sandbox.stub(driver.adb, 'clearTextField');
            driver.adb.clearTextField.throws();
            driver.getText.withArgs('el1').returns('#'.repeat(1));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.clear('el1').should.be.rejected);

          case 8:
            driver.adb.clearTextField.alwaysCalledWith(1).should.be['true'];
            driver.adb.clearTextField.callCount.should.be.equal(5);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('it should assume that the text have 100 chars if getText returns empty string', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getText');
            sandbox.stub(driver, 'click');
            sandbox.stub(driver.adb, 'clearTextField');
            driver.getText.withArgs('el1').returns('');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.clear('el1'));

          case 6:
            driver.adb.clearTextField.getCall(0).args[0].should.be.equal(50);
            driver.adb.clearTextField.getCall(1).args[0].should.be.equal(50);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('click', function () {
    it('should click an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.click('el1'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('element:click', { elementId: 'el1' }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLocation', function () {
    it('should get location of an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('element:getLocation').returns('loc_info');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLocation('el1').should.become('loc_info'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:getLocation', { elementId: 'el1' }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLocationInView', function () {
    it('should get location of an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getLocation');
            driver.getLocation.returns('loc_info');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getLocationInView('el1').should.become('loc_info'));

          case 4:
            driver.getLocation.calledWithExactly('el1').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getSize', function () {
    it('should get size of an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('element:getSize').returns('size_info');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getSize('el1').should.become('size_info'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:getSize', { elementId: 'el1' }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getElementRect', function () {
    it('should get rect of an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('element:getRect').returns('rect_info');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getElementRect('el1').should.become('rect_info'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:getRect', { elementId: 'el1' }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('touchLongClick', function () {
    it('should do touch long click on element', function callee$2$0() {
      var params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params = { elementId: 'el1', x: 12, y: 34, duration: 5 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.touchLongClick('el1', 12, 34, 5));

          case 3:
            _libAndroidHelpers2['default'].removeNullProperties.calledWithExactly(params).should.be['true'];
            driver.bootstrap.sendAction.calledWithExactly('element:touchLongClick', params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('touchDown', function () {
    it('should do touch down on element', function callee$2$0() {
      var params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params = { elementId: 'el1', x: 12, y: 34 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.touchDown('el1', 12, 34));

          case 3:
            _libAndroidHelpers2['default'].removeNullProperties.calledWithExactly(params).should.be['true'];
            driver.bootstrap.sendAction.calledWithExactly('element:touchDown', params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('touchUp', function () {
    it('should do touch up on element', function callee$2$0() {
      var params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params = { elementId: 'el1', x: 12, y: 34 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.touchUp('el1', 12, 34));

          case 3:
            _libAndroidHelpers2['default'].removeNullProperties.calledWithExactly(params).should.be['true'];
            driver.bootstrap.sendAction.calledWithExactly('element:touchUp', params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('touchMove', function () {
    it('should get element attribute', function callee$2$0() {
      var params;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            params = { elementId: 'el1', x: 12, y: 34 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.touchMove('el1', 12, 34));

          case 3:
            _libAndroidHelpers2['default'].removeNullProperties.calledWithExactly(params).should.be['true'];
            driver.bootstrap.sendAction.calledWithExactly('element:touchMove', params).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('complexTap', function () {
    it('should tap an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.complexTap(null, null, null, 12, 34));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('click', { x: 12, y: 34 }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('tap', function () {
    it('shoulde tap an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.tap('el1', 12, 34, 3));

          case 2:
            driver.bootstrap.sendAction.alwaysCalledWith('element:click', { elementId: 'el1', x: 12, y: 34 }).should.be['true'];
            driver.bootstrap.sendAction.calledThrice.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should tap without an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.tap(null, 12, 34, 3));

          case 2:
            driver.bootstrap.sendAction.alwaysCalledWith('click', { x: 12, y: 34 }).should.be['true'];
            driver.bootstrap.sendAction.calledThrice.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should perform single tap on element if x, y and count are not passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.tap('el1'));

          case 2:
            driver.bootstrap.sendAction.alwaysCalledWith('element:click').should.be['true'];
            driver.bootstrap.sendAction.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
