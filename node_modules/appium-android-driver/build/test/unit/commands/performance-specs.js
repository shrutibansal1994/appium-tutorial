'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _2 = require('../../..');

var _3 = _interopRequireDefault(_2);

var _libCommandsPerformanceJs = require('../../../lib/commands/performance.js');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _asyncbox = require('asyncbox');

var asyncbox = _interopRequireWildcard(_asyncbox);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var PACKAGE_NAME = 'io.appium.android.apis';
var RETRY_PAUSE = 1000;
var RETRY_COUNT = 2;

var sandbox = _sinon2['default'].createSandbox();
var adb = undefined;
var driver = undefined;

describe('performance data', function () {
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          adb = new _appiumAdb2['default']();
          driver = new _3['default']();
          driver.adb = adb;
          sandbox.stub(adb);
          sandbox.stub(asyncbox, 'retryInterval').callsFake(function callee$2$0(times, sleepMs, fn) {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(fn());

                case 2:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 3:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sandbox.restore();

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  describe('getPerformanceDataTypes', function () {
    it('should get the list of available getPerformance data type', function () {
      var types = driver.getPerformanceDataTypes();
      types.should.eql(_lodash2['default'].keys(_libCommandsPerformanceJs.SUPPORTED_PERFORMANCE_DATA_TYPES));
    });
  });
  describe('getPerformanceData', function () {
    it('should return battery info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getBatteryInfo').returns('data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getPerformanceData(null, 'batteryinfo').should.become('data'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return cpu info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getCPUInfo').withArgs('pkg').returns('data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getPerformanceData('pkg', 'cpuinfo').should.become('data'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return memory info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getMemoryInfo').withArgs('pkg').returns('data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getPerformanceData('pkg', 'memoryinfo').should.become('data'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return network info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkTrafficInfo').returns('data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getPerformanceData(null, 'networkinfo').should.become('data'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if data type is not valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getPerformanceData(null, 'invalid').should.be.rejectedWith(/No performance data of type 'invalid' found./));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getCPUInfo', function () {
    it('should return cpu data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.withArgs(['dumpsys', 'cpuinfo', '|', 'grep', '\'' + PACKAGE_NAME + '\'']).returns(' +0% 2209/io.appium.android.apis: 14% user + 23% kernel');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCPUInfo(PACKAGE_NAME));

          case 3:
            context$3$0.t0 = [_libCommandsPerformanceJs.CPU_KEYS, ['14', '23']];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if no data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns(null);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCPUInfo(PACKAGE_NAME, 1).should.be.rejectedWith(/No data from dumpsys/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if cpu data is not in valid format', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns('invalid data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getCPUInfo(PACKAGE_NAME, 1).should.be.rejectedWith(/Unable to parse cpu data/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getBatteryInfo', function () {
    it('should return battery info', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.withArgs(['dumpsys', 'battery', '|', 'grep', 'level']).returns('  level: 47');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getBatteryInfo().should.become([_libCommandsPerformanceJs.BATTERY_KEYS, ['47']]));

          case 3:
            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if data is not valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns('invalid data');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getBatteryInfo(1).should.be.rejectedWith(/Unable to parse battery data/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if no data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns(null);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getBatteryInfo(1).should.be.rejectedWith(/No data from dumpsys/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getMemoryInfo', function () {
    var shellArgs = ['dumpsys', 'meminfo', '\'' + PACKAGE_NAME + '\'', '|', 'grep', '-E', "'Native|Dalvik|EGL|GL|TOTAL'"];
    var dumpsysDataAPI19 = '\n                          Pss  Private  Private  Swapped     Heap     Heap     Heap\n                        Total    Dirty    Clean    Dirty     Size    Alloc     Free\n                       ------   ------   ------   ------   ------   ------   ------\n         Native Heap      107      102        0        0      112      111      555\n         Dalvik Heap      108      103        0        0      555      555      555\n        Dalvik Other      555      555        0        0\n          EGL mtrack      109      104        0      555        0        0        0\n           GL mtrack      110      105        0      555        0        0        0\n               TOTAL      555      555      555        0               555      555\n               TOTAL      106      101      555        0      555      555      555';
    var dumpsysDataAPI18 = '\n                                Shared  Private     Heap     Heap     Heap\n                          Pss    Dirty    Dirty     Size    Alloc     Free\n                       ------   ------   ------   ------   ------   ------\n              Native      107      555      102      112      111      555\n              Dalvik      108      555      103      555      555      555\n                 EGL      109      555      104      555        0        0\n                  GL      110      555      105      555        0        0\n               TOTAL      106      555      101      555      555      555';
    var expectedResult = [_libCommandsPerformanceJs.MEMORY_KEYS, ['101', '102', '103', '104', '105', // private dirty total|native|dalvik|egl|gl
    '106', '107', '108', '109', '110', // pss           total|native|dalvik|egl|gl
    '111', '112']]; // native        heap_alloc|heap_size
    it('should return memory info for API>18', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.getApiLevel.returns(19);
            adb.shell.withArgs(shellArgs).returns(dumpsysDataAPI19);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getMemoryInfo(PACKAGE_NAME));

          case 4:
            context$3$0.t0 = expectedResult;
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return memory info for API<=18', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.getApiLevel.returns(18);
            adb.shell.withArgs(shellArgs).returns(dumpsysDataAPI18);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getMemoryInfo(PACKAGE_NAME));

          case 4:
            context$3$0.t0 = expectedResult;
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if data is not valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns('TOTAL nodex nodex nodex nodex nodex nodex nodex');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getMemoryInfo(PACKAGE_NAME, 1).should.be.rejectedWith(/Unable to parse memory data/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if no data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns(null);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getMemoryInfo(PACKAGE_NAME, 1).should.be.rejectedWith(/No data from dumpsys/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getNetworkTrafficInfo', function () {
    var shellArgs = ['dumpsys', 'netstats'];
    var header = '\n      Xt stats:\n        Pending bytes: pbytes\n        History since boot:\n        ident=[[type=MOBILE, subType=COMBINED, subscriberId=555]] uid=-1 set=ALL tag=0x0\n          NetworkStatsHistory: bucketDuration=dur';
    var data = header + '\n            st=start1 rb=rb1 rp=rp1 tb=tb1 tp=tp1 op=op1\n            st=start2 rb=rb2 rp=rp2 tb=tb2 tp=tp2 op=op2';
    var dataInOldFormat = header + '\n            bucketStart=start1 activeTime=time1 rxBytes=rb1 rxPackets=rp1 txBytes=tb1 txPackets=tp1 operations=op1\n            bucketStart=start2 activeTime=time2 rxBytes=rb2 rxPackets=rp2 txBytes=tb2 txPackets=tp2 operations=op2';
    it('should return network stats', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.withArgs(shellArgs).returns(data);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkTrafficInfo());

          case 3:
            context$3$0.t0 = [_libCommandsPerformanceJs.NETWORK_KEYS[1], ['start1', undefined, 'rb1', 'rp1', 'tb1', 'tp1', 'op1', 'dur'], ['start2', undefined, 'rb2', 'rp2', 'tb2', 'tp2', 'op2', 'dur']];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to parse data in old format', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.withArgs(shellArgs).returns(dataInOldFormat);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkTrafficInfo());

          case 3:
            context$3$0.t0 = [_libCommandsPerformanceJs.NETWORK_KEYS[0], ['start1', 'time1', 'rb1', 'rp1', 'tb1', 'tp1', 'op1', 'dur'], ['start2', 'time2', 'rb2', 'rp2', 'tb2', 'tp2', 'op2', 'dur']];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            asyncbox.retryInterval.calledWith(RETRY_COUNT, RETRY_PAUSE).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be fulfilled if history is empty', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns(header);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkTrafficInfo());

          case 3:
            context$3$0.t0 = [];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if data is not valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns('nodex');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkTrafficInfo(1).should.be.rejectedWith(/Unable to parse network traffic data/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if no data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.shell.returns(null);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkTrafficInfo(1).should.be.rejectedWith(/No data from dumpsys/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
