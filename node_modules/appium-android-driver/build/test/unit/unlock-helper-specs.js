'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _libUnlockHelpers = require('../../lib/unlock-helpers');

var _libUnlockHelpers2 = _interopRequireDefault(_libUnlockHelpers);

var _libDriver = require('../../lib/driver');

var _libDriver2 = _interopRequireDefault(_libDriver);

var _asyncbox = require('asyncbox');

var asyncbox = _interopRequireWildcard(_asyncbox);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var KEYCODE_NUMPAD_ENTER = "66";
var INPUT_KEYS_WAIT_TIME = 100;
var HIDE_KEYBOARD_WAIT_TIME = 100;
var UNLOCK_WAIT_TIME = 100;

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Unlock Helpers', function () {
  var adb = new _appiumAdb2['default']();
  var driver = new _libDriver2['default']();
  var sandbox = _sinon2['default'].createSandbox();
  var expect = _chai2['default'].expect;
  describe('isValidUnlockType', function () {
    it('should verify the unlock types', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libUnlockHelpers2['default'].isValidUnlockType('pin').should.equal(true);
            _libUnlockHelpers2['default'].isValidUnlockType('pattern').should.equal(true);
            _libUnlockHelpers2['default'].isValidUnlockType('password').should.equal(true);
            _libUnlockHelpers2['default'].isValidUnlockType('fingerprint').should.equal(true);
            _libUnlockHelpers2['default'].isValidUnlockType('telepathy').should.equal(false);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isValidKey', function () {
    it('should verify the unlock keys for each type', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libUnlockHelpers2['default'].isValidKey('pin').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pin', ' ').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pin', '1111').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('pin', '1abc').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('fingerprint').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('fingerprint', ' ').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('fingerprint', '1111').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('fingerprint', '1abc').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern', '1').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern', '1234').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('pattern', '123456789').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('pattern', '01234').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern', ' ').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern', '1abc').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('pattern', '1213').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('password', '121c3').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('password', 'appium').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('password', 'appium-android-driver').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('password', '@#$%&-+()*"\':;!?,_ ./~`|={}\\[]').should.equal(true);
            _libUnlockHelpers2['default'].isValidKey('password', '123').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('password').should.equal(false);
            _libUnlockHelpers2['default'].isValidKey('password', '   ').should.equal(false);

          case 23:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if unlock type is invalid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            expect(function () {
              return _libUnlockHelpers2['default'].isValidKey('invalid_unlock_type', '1');
            }).to['throw']('Invalid unlock type');

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('dismissKeyguard', (0, _appiumTestSupport.withMocks)({ driver: driver, adb: adb, asyncbox: asyncbox, helpers: _libUnlockHelpers2['default'] }, function (mocks) {
    it('should hide keyboard if keyboard is snown', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isKeyboardShown').returns(true);
            mocks.driver.expects('hideKeyboard').once();
            mocks.asyncbox.expects('sleep').withExactArgs(HIDE_KEYBOARD_WAIT_TIME).once();
            mocks.adb.expects('shell').once();
            mocks.adb.expects('back').once();
            mocks.adb.expects('getApiLevel').returns(20);
            mocks.helpers.expects('swipeUp').once();
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].dismissKeyguard(driver, adb));

          case 9:
            mocks.driver.verify();
            mocks.asyncbox.verify();
            mocks.helpers.verify();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should dismiss notifications and dissmiss keyguard via swipping up', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isKeyboardShown').returns(false);
            mocks.adb.expects('shell').withExactArgs(["service", "call", "notification", "1"]).once();
            mocks.adb.expects('back').once();
            mocks.adb.expects('getApiLevel').returns(21);
            mocks.helpers.expects('swipeUp').withExactArgs(driver).once();
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].dismissKeyguard(driver, adb));

          case 7:
            mocks.driver.verify();
            mocks.adb.verify();
            mocks.helpers.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should dissmiss keyguard via dismiss-keyguard shell command if API level > 21', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isKeyboardShown').returns(false);
            mocks.adb.expects('shell').onCall(0).returns('');
            mocks.adb.expects('back').once();
            mocks.adb.expects('getApiLevel').returns(22);
            mocks.adb.expects('shell').withExactArgs(["wm", "dismiss-keyguard"]).once();
            mocks.helpers.expects('swipeUp').never();
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].dismissKeyguard(driver, adb));

          case 8:
            mocks.driver.verify();
            mocks.adb.verify();
            mocks.helpers.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('swipeUp', (0, _appiumTestSupport.withMocks)({ driver: driver, helpers: _libUnlockHelpers2['default'] }, function (mocks) {
    it('should perform swipe up touch action', function callee$2$0() {
      var windowSize, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            windowSize = { x: 475, y: 800 };
            actions = [{ action: 'press', options: { element: null, x: 237, y: 790 } }, { action: 'moveTo', options: { element: null, x: 237, y: 100 } }, { action: 'release' }];

            mocks.driver.expects('getWindowSize').returns(windowSize);
            mocks.driver.expects('performTouch').withExactArgs(actions).once;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].swipeUp(driver));

          case 6:
            mocks.driver.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('encodePassword', function () {
    it('should verify the password with blank space is encoded', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libUnlockHelpers2['default'].encodePassword('a p p i u m').should.equal("a%sp%sp%si%su%sm");
            _libUnlockHelpers2['default'].encodePassword('   ').should.equal("%s%s%s");

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('stringKeyToArr', function () {
    it('should cast string keys to array', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libUnlockHelpers2['default'].stringKeyToArr('1234').should.eql(['1', '2', '3', '4']);
            _libUnlockHelpers2['default'].stringKeyToArr(' 1234 ').should.eql(['1', '2', '3', '4']);
            _libUnlockHelpers2['default'].stringKeyToArr('1 2 3 4').should.eql(['1', '2', '3', '4']);
            _libUnlockHelpers2['default'].stringKeyToArr('1  2  3  4').should.eql(['1', '2', '3', '4']);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fingerprintUnlock', (0, _appiumTestSupport.withMocks)({ adb: adb, asyncbox: asyncbox }, function (mocks) {
    it('should be able to unlock device via fingerprint if API level >= 23', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { unlockKey: '123' };

            mocks.adb.expects('getApiLevel').returns(23);
            mocks.adb.expects('fingerprint').withExactArgs(caps.unlockKey).once();
            mocks.asyncbox.expects('sleep').withExactArgs(UNLOCK_WAIT_TIME).once();
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].fingerprintUnlock(adb, driver, caps).should.be.fulfilled);

          case 6:
            mocks.adb.verify();
            mocks.asyncbox.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if API level < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').returns(22);
            mocks.adb.expects('fingerprint').never();
            mocks.asyncbox.expects('sleep').never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].fingerprintUnlock(adb).should.eventually.be.rejectedWith('only works for Android 6+'));

          case 5:
            mocks.adb.verify();
            mocks.asyncbox.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('pinUnlock', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libUnlockHelpers2['default'], driver: driver, asyncbox: asyncbox }, function (mocks) {
    var caps = { unlockKey: '13579' };
    var keys = ['1', '3', '5', '7', '9'];
    var els = [{ ELEMENT: 1 }, { ELEMENT: 2 }, { ELEMENT: 3 }, { ELEMENT: 4 }, { ELEMENT: 5 }, { ELEMENT: 6 }, { ELEMENT: 7 }, { ELEMENT: 8 }, { ELEMENT: 9 }];
    afterEach(function () {
      sandbox.restore();
    });
    it('should be able to unlock device using pin (API level >= 21)', function callee$2$0() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, e;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects('dismissKeyguard').once();
            mocks.helpers.expects('stringKeyToArr').returns(keys);
            mocks.adb.expects('getApiLevel').returns(21);
            mocks.driver.expects('findElOrEls').withExactArgs("id", "com.android.systemui:id/digit_text", true).returns(els);
            mocks.driver.expects('findElOrEls').withExactArgs("id", "com.android.systemui:id/key_enter", false).returns({ ELEMENT: 100 });
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$3$0.prev = 8;
            for (_iterator = _getIterator(els); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              e = _step.value;

              mocks.driver.expects('getAttribute').withExactArgs('text', e.ELEMENT).returns(e.ELEMENT.toString());
            }
            context$3$0.next = 16;
            break;

          case 12:
            context$3$0.prev = 12;
            context$3$0.t0 = context$3$0['catch'](8);
            _didIteratorError = true;
            _iteratorError = context$3$0.t0;

          case 16:
            context$3$0.prev = 16;
            context$3$0.prev = 17;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 19:
            context$3$0.prev = 19;

            if (!_didIteratorError) {
              context$3$0.next = 22;
              break;
            }

            throw _iteratorError;

          case 22:
            return context$3$0.finish(19);

          case 23:
            return context$3$0.finish(16);

          case 24:
            mocks.asyncbox.expects('sleep').withExactArgs(UNLOCK_WAIT_TIME).once();
            sandbox.stub(driver, 'click');

            context$3$0.next = 28;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].pinUnlock(adb, driver, caps));

          case 28:

            driver.click.getCall(0).args[0].should.equal(1);
            driver.click.getCall(1).args[0].should.equal(3);
            driver.click.getCall(2).args[0].should.equal(5);
            driver.click.getCall(3).args[0].should.equal(7);
            driver.click.getCall(4).args[0].should.equal(9);
            driver.click.getCall(5).args[0].should.equal(100);

            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.adb.verify();
            mocks.asyncbox.verify();

          case 38:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
    });
    it('should be able to unlock device using pin (API level < 21)', function callee$2$0() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pin;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects('dismissKeyguard').once();
            mocks.helpers.expects('stringKeyToArr').returns(keys);
            mocks.adb.expects('getApiLevel').returns(20);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$3$0.prev = 6;
            for (_iterator2 = _getIterator(keys); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              pin = _step2.value;

              mocks.driver.expects('findElOrEls').withExactArgs("id", 'com.android.keyguard:id/key' + pin, false).returns({ ELEMENT: parseInt(pin, 10) });
            }
            context$3$0.next = 14;
            break;

          case 10:
            context$3$0.prev = 10;
            context$3$0.t0 = context$3$0['catch'](6);
            _didIteratorError2 = true;
            _iteratorError2 = context$3$0.t0;

          case 14:
            context$3$0.prev = 14;
            context$3$0.prev = 15;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 17:
            context$3$0.prev = 17;

            if (!_didIteratorError2) {
              context$3$0.next = 20;
              break;
            }

            throw _iteratorError2;

          case 20:
            return context$3$0.finish(17);

          case 21:
            return context$3$0.finish(14);

          case 22:
            mocks.driver.expects('findElOrEls').withExactArgs("id", "com.android.keyguard:id/key_enter", false).returns({ ELEMENT: 100 });
            mocks.asyncbox.expects('sleep').withExactArgs(UNLOCK_WAIT_TIME).once();
            sandbox.stub(driver, 'click');

            context$3$0.next = 27;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].pinUnlock(adb, driver, caps));

          case 27:

            driver.click.getCall(0).args[0].should.equal(1);
            driver.click.getCall(1).args[0].should.equal(3);
            driver.click.getCall(2).args[0].should.equal(5);
            driver.click.getCall(3).args[0].should.equal(7);
            driver.click.getCall(4).args[0].should.equal(9);
            driver.click.getCall(5).args[0].should.equal(100);

            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.adb.verify();
            mocks.asyncbox.verify();

          case 37:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[6, 10, 14, 22], [15,, 17, 21]]);
    });
    it('should throw error if pin buttons does not exist (API level >= 21)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects('dismissKeyguard').once();
            mocks.helpers.expects('stringKeyToArr').once();
            mocks.adb.expects('getApiLevel').returns(21);
            mocks.driver.expects('findElOrEls').returns(null);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].pinUnlock(adb, driver, caps).should.eventually.be.rejectedWith('Error finding unlock pin buttons!'));

          case 6:
            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if pin buttons does not exist (API level < 21)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects('dismissKeyguard').once();
            mocks.helpers.expects('stringKeyToArr').returns(keys);
            mocks.adb.expects('getApiLevel').returns(20);
            mocks.driver.expects('findElOrEls').withExactArgs('id', 'com.android.keyguard:id/key1', false).returns(null);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].pinUnlock(adb, driver, caps).should.eventually.be.rejectedWith('Error finding unlock pin \'1\' button!'));

          case 6:
            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('passwordUnlock', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libUnlockHelpers2['default'], asyncbox: asyncbox }, function (mocks) {
    it('should be able to unlock device using password', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { unlockKey: 'psswrd' };

            mocks.helpers.expects('dismissKeyguard').withExactArgs(driver, adb).once();
            mocks.helpers.expects('encodePassword').withExactArgs(caps.unlockKey).returns(caps.unlockKey);
            mocks.adb.expects('shell').withExactArgs(['input', 'text', caps.unlockKey]).once();
            mocks.asyncbox.expects('sleep').withExactArgs(INPUT_KEYS_WAIT_TIME).once();
            mocks.adb.expects('shell').withExactArgs(['input', 'keyevent', KEYCODE_NUMPAD_ENTER]);
            mocks.asyncbox.expects('sleep').withExactArgs(UNLOCK_WAIT_TIME).once();
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].passwordUnlock(adb, driver, caps));

          case 9:
            mocks.helpers.verify();
            mocks.adb.verify();
            mocks.asyncbox.verify();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('getPatternKeyPosition', function () {
    it('should verify pattern pin is aproximatelly to its position', function callee$2$0() {
      var pins, cols, rows;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pins = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (pin) {
              return _libUnlockHelpers2['default'].getPatternKeyPosition(pin, { x: 33, y: 323 }, 137.6);
            });
            cols = [101, 238, 375];
            rows = [391, 528, 665];

            expect(pins[0].x).to.be.within(cols[0] - 5, cols[0] + 5);
            expect(pins[1].x).to.be.within(cols[1] - 5, cols[1] + 5);
            expect(pins[2].x).to.be.within(cols[2] - 5, cols[2] + 5);
            expect(pins[3].x).to.be.within(cols[0] - 5, cols[0] + 5);
            expect(pins[4].x).to.be.within(cols[1] - 5, cols[1] + 5);
            expect(pins[5].x).to.be.within(cols[2] - 5, cols[2] + 5);
            expect(pins[6].x).to.be.within(cols[0] - 5, cols[0] + 5);
            expect(pins[7].x).to.be.within(cols[1] - 5, cols[1] + 5);
            expect(pins[8].x).to.be.within(cols[2] - 5, cols[2] + 5);
            expect(pins[0].y).to.be.within(rows[0] - 5, rows[0] + 5);
            expect(pins[1].y).to.be.within(rows[0] - 5, rows[0] + 5);
            expect(pins[2].y).to.be.within(rows[0] - 5, rows[0] + 5);
            expect(pins[3].y).to.be.within(rows[1] - 5, rows[1] + 5);
            expect(pins[4].y).to.be.within(rows[1] - 5, rows[1] + 5);
            expect(pins[5].y).to.be.within(rows[1] - 5, rows[1] + 5);
            expect(pins[6].y).to.be.within(rows[2] - 5, rows[2] + 5);
            expect(pins[7].y).to.be.within(rows[2] - 5, rows[2] + 5);
            expect(pins[8].y).to.be.within(rows[2] - 5, rows[2] + 5);

          case 21:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getPatternActions', function () {
    it('should generate press, moveTo, relase gesture scheme to unlock by pattern', function callee$2$0() {
      var keys, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            keys = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
            actions = _libUnlockHelpers2['default'].getPatternActions(keys, { x: 0, y: 0 }, 1);

            actions.map(function (action, i) {
              if (i === 0) {
                action.action.should.equal('press');
              } else if (i === keys.length) {
                action.action.should.equal('release');
              } else {
                action.action.should.equal('moveTo');
              }
            });

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should verify pattern gestures moves to non consecutives pins', function callee$2$0() {
      var keys, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            keys = ["7", "2", "9", "8", "5", "6", "1", "4", "3"];
            actions = _libUnlockHelpers2['default'].getPatternActions(keys, { x: 0, y: 0 }, 1);

            // Move from pin 7 to pin 2
            actions[1].options.x.should.equal(1);
            actions[1].options.y.should.equal(-2);
            // Move from pin 2 to pin 9
            actions[2].options.x.should.equal(1);
            actions[2].options.y.should.equal(2);
            // Move from pin 9 to pin 8
            actions[3].options.x.should.equal(-1);
            actions[3].options.y.should.equal(0);
            // Move from pin 8 to pin 5
            actions[4].options.x.should.equal(0);
            actions[4].options.y.should.equal(-1);
            // Move from pin 5 to pin 6
            actions[5].options.x.should.equal(1);
            actions[5].options.y.should.equal(0);
            // Move from pin 6 to pin 1
            actions[6].options.x.should.equal(-2);
            actions[6].options.y.should.equal(-1);
            // Move from pin 1 to pin 4
            actions[7].options.x.should.equal(0);
            actions[7].options.y.should.equal(1);
            // Move from pin 4 to pin 3
            actions[8].options.x.should.equal(2);
            actions[8].options.y.should.equal(-1);

          case 18:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('patternUnlock', (0, _appiumTestSupport.withMocks)({ driver: driver, helpers: _libUnlockHelpers2['default'], adb: adb, asyncbox: asyncbox }, function (mocks) {
    var el = { ELEMENT: 1 };
    var pos = { x: 10, y: 20 };
    var size = { width: 300 };
    var keys = ['1', '3', '5', '7', '9'];
    var caps = { unlockKey: '13579' };
    beforeEach(function () {
      mocks.helpers.expects('dismissKeyguard').withExactArgs(driver, adb).once();
      mocks.helpers.expects('stringKeyToArr').returns(keys);
      mocks.driver.expects('getLocation').withExactArgs(el.ELEMENT).returns(pos);
      mocks.driver.expects('getSize').withExactArgs(el.ELEMENT).returns(size);
      mocks.helpers.expects('getPatternActions').withExactArgs(keys, pos, 100).returns('actions');
      mocks.driver.expects('performTouch').withExactArgs('actions').once();
      mocks.asyncbox.expects('sleep').withExactArgs(UNLOCK_WAIT_TIME).once();
    });
    it('should be able to unlock device using pattern (API level >= 21)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').returns(21);
            mocks.driver.expects('findElOrEls').withExactArgs('id', 'com.android.systemui:id/lockPatternView', false).returns(el);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].patternUnlock(adb, driver, caps));

          case 4:
            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.asyncbox.verify();
            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to unlock device using pattern (API level < 21)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').returns(20);
            mocks.driver.expects('findElOrEls').withExactArgs('id', 'com.android.keyguard:id/lockPatternView', false).returns(el);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libUnlockHelpers2['default'].patternUnlock(adb, driver, caps));

          case 4:
            mocks.helpers.verify();
            mocks.driver.verify();
            mocks.asyncbox.verify();
            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
