'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _libWebviewHelpers = require('../../lib/webview-helpers');

var _libWebviewHelpers2 = _interopRequireDefault(_libWebviewHelpers);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var sandbox = _sinon2['default'].createSandbox();

describe('Webview Helpers', function () {
  var adb = new _appiumAdb2['default']();

  afterEach(function () {
    sandbox.restore();
  });

  describe('procFromWebview', function () {
    var webview = 'WEBVIEW_123';
    var pkg = 'io.appium.android.apis';

    it('should get package name when all fields are filled', function callee$2$0() {
      var name;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(adb, 'shell').callsFake(function () {
              return 'USER           PID  PPID     VSZ    RSS WCHAN            ADDR S NAME\n' + 'root             1     0    9948   2344 SyS_epoll_wait      0 S init\n' + 'root             2     0       0      0 kthreadd            0 S [kthreadd]\n' + 'root             3     2       0      0 smpboot_thread_fn   0 S [ksoftirqd/0]\n' + 'root             5     2       0      0 worker_thread       0 S [kworker/0:0H]\n' + 'root             7     2       0      0 rcu_gp_kthread      0 S [rcu_preempt]\n' + 'u0_a88         123  1313 1513968 135756 ffffffff            0 R io.appium.android.apis\n';
            });

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].procFromWebview(adb, webview));

          case 3:
            name = context$3$0.sent;

            name.should.eql(pkg);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get package name when some fields are empty', function callee$2$0() {
      var name;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(adb, 'shell').callsFake(function () {
              return 'USER           PID  PPID     VSZ    RSS WCHAN            ADDR S NAME\n' + 'root             1     0    9948   2344 SyS_epoll_wait      0 S init\n' + 'root             2     0       0      0 kthreadd            0 S [kthreadd]\n' + 'root             3     2       0      0 smpboot_thread_fn   0 S [ksoftirqd/0]\n' + 'root             5     2       0      0 worker_thread       0 S [kworker/0:0H]\n' + 'root             7     2       0      0 rcu_gp_kthread      0 S [rcu_preempt]\n' + 'u0_a88         123  1313 1513968 135756                     0 R io.appium.android.apis\n';
            });

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].procFromWebview(adb, webview));

          case 3:
            name = context$3$0.sent;

            name.should.eql(pkg);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get package name when some headers are empty', function callee$2$0() {
      var name;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(adb, 'shell').callsFake(function () {
              return 'USER           PID  PPID     VSZ    RSS WCHAN            ADDR   NAME\n' + 'root             1     0    9948   2344 SyS_epoll_wait      0 S init\n' + 'root             2     0       0      0 kthreadd            0 S [kthreadd]\n' + 'root             3     2       0      0 smpboot_thread_fn   0 S [ksoftirqd/0]\n' + 'root             5     2       0      0 worker_thread       0 S [kworker/0:0H]\n' + 'root             7     2       0      0 rcu_gp_kthread      0 S [rcu_preempt]\n' + 'u0_a88         123  1313 1513968 135756 ffffffff            0 R io.appium.android.apis\n';
            });

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].procFromWebview(adb, webview));

          case 3:
            name = context$3$0.sent;

            name.should.eql(pkg);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get package name when some headers and fields are empty', function callee$2$0() {
      var name;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(adb, 'shell').callsFake(function () {
              return 'USER           PID  PPID     VSZ    RSS WCHAN            ADDR   NAME\n' + 'root             1     0    9948   2344 SyS_epoll_wait      0 S init\n' + 'root             2     0       0      0 kthreadd            0 S [kthreadd]\n' + 'root             3     2       0      0 smpboot_thread_fn   0 S [ksoftirqd/0]\n' + 'root             5     2       0      0 worker_thread       0 S [kworker/0:0H]\n' + 'root             7     2       0      0 rcu_gp_kthread      0 S [rcu_preempt]\n' + 'u0_a88         123  1313 1513968 135756                     0 R io.appium.android.apis\n';
            });

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].procFromWebview(adb, webview));

          case 3:
            name = context$3$0.sent;

            name.should.eql(pkg);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('When the webviews are obtained', function () {
    describe('for an app that embeds Chromium', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell').callsFake(function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @webview_devtools_remote_123\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'webview_devtools_remote_123'));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then the webview is returned', function () {
        webViews.length.should.equal(1);
        webViews.should.deep.equal(['WEBVIEW_123']);
      });
    });

    describe('for a Chromium webview', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell').callsFake(function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @chrome_devtools_remote\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'chrome_devtools_remote'));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then the webview is returned', function () {
        webViews.length.should.equal(1);
        webViews.should.deep.equal(['CHROMIUM']);
      });
    });

    describe('and no webviews exist', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell').callsFake(function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then no webviews are returned', function () {
        webViews.length.should.equal(0);
      });
    });

    describe('and crosswalk webviews exist', function () {
      var webViews = undefined;

      beforeEach(function () {
        sandbox.stub(adb, 'shell').callsFake(function () {
          return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @com.application.myapp_devtools_remote\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
        });
      });

      describe('and the device socket is not specified', function () {
        beforeEach(function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb));

              case 2:
                webViews = context$5$0.sent;

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });

        it('then the unix sockets are queried', function () {
          adb.shell.calledOnce.should.be['true'];
          adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
        });

        it('then the webview is returned', function () {
          webViews.length.should.equal(1);
          webViews.should.deep.equal(['WEBVIEW_com.application.myapp']);
        });
      });

      describe('and the device socket is specified', function () {
        beforeEach(function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'com.application.myapp_devtools_remote'));

              case 2:
                webViews = context$5$0.sent;

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });

        it('then the unix sockets are queried', function () {
          adb.shell.calledOnce.should.be['true'];
          adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
        });

        it('then the webview is returned', function () {
          webViews.length.should.equal(1);
          webViews.should.deep.equal(['WEBVIEW_com.application.myapp']);
        });
      });

      describe('and the device socket is specified but is not found', function () {
        beforeEach(function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'com.application.myotherapp_devtools_remote'));

              case 2:
                webViews = context$5$0.sent;

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });

        it('then the unix sockets are queried', function () {
          adb.shell.calledOnce.should.be['true'];
          adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
        });

        it('then no webviews are returned', function () {
          webViews.length.should.equal(0);
        });
      });
    });

    describe('and webviews exist', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        var shellStub;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              shellStub = sandbox.stub(adb, 'shell');

              shellStub.onCall(0).returns('Num               RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @webview_devtools_remote_1234\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n');
              shellStub.onCall(1).returns('USER    PID  PPID VSIZE   RSS   WCHAN              PC   NAME\n' + 'root      1     0  5792   988   SyS_epoll_ 0000000000 S /init\n' + 'root      2     0     0     0   kthreadd   0000000000 S kthreadd\n' + 'root   1234     2     0     0   SyS_epoll_ 0000000000 S com.application.myapp\n');

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb));

            case 5:
              webViews = context$4$0.sent;

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('then the unix sockets and process list are queried', function () {
        adb.shell.calledTwice.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
        adb.shell.getCall(1).args[0].should.equal('ps');
      });

      it('then the webview is returned', function () {
        webViews.length.should.equal(1);
        webViews.should.deep.equal(['WEBVIEW_com.application.myapp']);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
