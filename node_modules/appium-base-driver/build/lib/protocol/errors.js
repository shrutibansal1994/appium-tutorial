'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _es6Error = require('es6-error');

var _es6Error2 = _interopRequireDefault(_es6Error);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _httpStatusCodes = require('http-status-codes');

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');
var w3cLog = _appiumSupport.logger.getLogger('W3C');

// base error class for all of our errors

var ProtocolError = (function (_ES6Error) {
  _inherits(ProtocolError, _ES6Error);

  function ProtocolError(msg, jsonwpCode, w3cStatus, error) {
    _classCallCheck(this, ProtocolError);

    _get(Object.getPrototypeOf(ProtocolError.prototype), 'constructor', this).call(this, msg);
    this.jsonwpCode = jsonwpCode;
    this.error = error || 'An unknown error has occurred';
    if (this.jsonwpCode === null) {
      this.jsonwpCode = 13;
    }
    this.w3cStatus = w3cStatus || _httpStatusCodes2['default'].BAD_REQUEST;
    this._stacktrace = null;
  }

  // https://github.com/SeleniumHQ/selenium/blob/176b4a9e3082ac1926f2a436eb346760c37a5998/java/client/src/org/openqa/selenium/remote/ErrorCodes.java#L215
  // https://github.com/SeleniumHQ/selenium/issues/5562#issuecomment-370379470
  // https://w3c.github.io/webdriver/webdriver-spec.html#dfn-error-code

  _createClass(ProtocolError, [{
    key: 'stacktrace',
    get: function get() {
      return this._stacktrace || this.stack;
    },
    set: function set(value) {
      this._stacktrace = value;
    }
  }]);

  return ProtocolError;
})(_es6Error2['default']);

var NoSuchDriverError = (function (_ProtocolError) {
  _inherits(NoSuchDriverError, _ProtocolError);

  _createClass(NoSuchDriverError, null, [{
    key: 'code',
    value: function code() {
      return 6;
    }

    // W3C Error is called InvalidSessionID
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid session id';
    }
  }]);

  function NoSuchDriverError(err) {
    _classCallCheck(this, NoSuchDriverError);

    _get(Object.getPrototypeOf(NoSuchDriverError.prototype), 'constructor', this).call(this, err || 'A session is either terminated or not started', NoSuchDriverError.code(), NoSuchDriverError.w3cStatus(), NoSuchDriverError.error());
  }

  return NoSuchDriverError;
})(ProtocolError);

var NoSuchElementError = (function (_ProtocolError2) {
  _inherits(NoSuchElementError, _ProtocolError2);

  _createClass(NoSuchElementError, null, [{
    key: 'code',
    value: function code() {
      return 7;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such element';
    }
  }]);

  function NoSuchElementError(err) {
    _classCallCheck(this, NoSuchElementError);

    _get(Object.getPrototypeOf(NoSuchElementError.prototype), 'constructor', this).call(this, err || 'An element could not be located on the page using the given ' + 'search parameters.', NoSuchElementError.code(), NoSuchElementError.w3cStatus(), NoSuchElementError.error());
  }

  return NoSuchElementError;
})(ProtocolError);

var NoSuchFrameError = (function (_ProtocolError3) {
  _inherits(NoSuchFrameError, _ProtocolError3);

  _createClass(NoSuchFrameError, null, [{
    key: 'code',
    value: function code() {
      return 8;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such frame';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }]);

  function NoSuchFrameError(err) {
    _classCallCheck(this, NoSuchFrameError);

    _get(Object.getPrototypeOf(NoSuchFrameError.prototype), 'constructor', this).call(this, err || 'A request to switch to a frame could not be satisfied because ' + 'the frame could not be found.', NoSuchFrameError.code(), NoSuchFrameError.w3cStatus(), NoSuchFrameError.error());
  }

  return NoSuchFrameError;
})(ProtocolError);

var UnknownCommandError = (function (_ProtocolError4) {
  _inherits(UnknownCommandError, _ProtocolError4);

  _createClass(UnknownCommandError, null, [{
    key: 'code',
    value: function code() {
      return 9;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown command';
    }
  }]);

  function UnknownCommandError(err) {
    _classCallCheck(this, UnknownCommandError);

    _get(Object.getPrototypeOf(UnknownCommandError.prototype), 'constructor', this).call(this, err || 'The requested resource could not be found, or a request was ' + 'received using an HTTP method that is not supported by the mapped ' + 'resource.', UnknownCommandError.code(), UnknownCommandError.w3cStatus(), UnknownCommandError.error());
  }

  return UnknownCommandError;
})(ProtocolError);

var StaleElementReferenceError = (function (_ProtocolError5) {
  _inherits(StaleElementReferenceError, _ProtocolError5);

  _createClass(StaleElementReferenceError, null, [{
    key: 'code',
    value: function code() {
      return 10;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'stale element reference';
    }
  }]);

  function StaleElementReferenceError(err) {
    _classCallCheck(this, StaleElementReferenceError);

    _get(Object.getPrototypeOf(StaleElementReferenceError.prototype), 'constructor', this).call(this, err || 'An element command failed because the referenced element is no ' + 'longer attached to the DOM.', StaleElementReferenceError.code(), StaleElementReferenceError.w3cStatus(), StaleElementReferenceError.error());
  }

  return StaleElementReferenceError;
})(ProtocolError);

var ElementNotVisibleError = (function (_ProtocolError6) {
  _inherits(ElementNotVisibleError, _ProtocolError6);

  _createClass(ElementNotVisibleError, null, [{
    key: 'code',
    value: function code() {
      return 11;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not visible';
    }
  }]);

  function ElementNotVisibleError(err) {
    _classCallCheck(this, ElementNotVisibleError);

    _get(Object.getPrototypeOf(ElementNotVisibleError.prototype), 'constructor', this).call(this, err || 'An element command could not be completed because the element is ' + 'not visible on the page.', ElementNotVisibleError.code(), ElementNotVisibleError.w3cStatus(), ElementNotVisibleError.error());
  }

  return ElementNotVisibleError;
})(ProtocolError);

var InvalidElementStateError = (function (_ProtocolError7) {
  _inherits(InvalidElementStateError, _ProtocolError7);

  _createClass(InvalidElementStateError, null, [{
    key: 'code',
    value: function code() {
      return 12;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid element state';
    }
  }]);

  function InvalidElementStateError(err) {
    _classCallCheck(this, InvalidElementStateError);

    _get(Object.getPrototypeOf(InvalidElementStateError.prototype), 'constructor', this).call(this, err || 'An element command could not be completed because the element is ' + 'in an invalid state (e.g. attempting to click a disabled element).', InvalidElementStateError.code(), InvalidElementStateError.w3cStatus(), InvalidElementStateError.error());
  }

  return InvalidElementStateError;
})(ProtocolError);

var UnknownError = (function (_ProtocolError8) {
  _inherits(UnknownError, _ProtocolError8);

  _createClass(UnknownError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown error';
    }
  }]);

  function UnknownError(originalError) {
    _classCallCheck(this, UnknownError);

    var origMessage = originalError;
    if (originalError instanceof Error) {
      origMessage = originalError.message;
    }
    var message = 'An unknown server-side error occurred while processing ' + 'the command.';
    if (originalError) {
      message = message + ' Original error: ' + origMessage;
    }

    _get(Object.getPrototypeOf(UnknownError.prototype), 'constructor', this).call(this, message, UnknownError.code(), UnknownError.w3cStatus(), UnknownError.error());
  }

  return UnknownError;
})(ProtocolError);

var UnknownMethodError = (function (_ProtocolError9) {
  _inherits(UnknownMethodError, _ProtocolError9);

  _createClass(UnknownMethodError, null, [{
    key: 'code',
    value: function code() {
      return 405;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].METHOD_NOT_ALLOWED;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown method';
    }
  }]);

  function UnknownMethodError(err) {
    _classCallCheck(this, UnknownMethodError);

    _get(Object.getPrototypeOf(UnknownMethodError.prototype), 'constructor', this).call(this, err || 'The requested command matched a known URL but did not match an method for that URL', UnknownMethodError.code(), UnknownMethodError.w3cStatus(), UnknownMethodError.error());
  }

  return UnknownMethodError;
})(ProtocolError);

var UnsupportedOperationError = (function (_ProtocolError10) {
  _inherits(UnsupportedOperationError, _ProtocolError10);

  _createClass(UnsupportedOperationError, null, [{
    key: 'code',
    value: function code() {
      return 405;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function UnsupportedOperationError(err) {
    _classCallCheck(this, UnsupportedOperationError);

    _get(Object.getPrototypeOf(UnsupportedOperationError.prototype), 'constructor', this).call(this, err || 'A server-side error occurred. Command cannot be supported.', UnsupportedOperationError.code(), UnsupportedOperationError.w3cStatus(), UnsupportedOperationError.error());
  }

  return UnsupportedOperationError;
})(ProtocolError);

var ElementIsNotSelectableError = (function (_ProtocolError11) {
  _inherits(ElementIsNotSelectableError, _ProtocolError11);

  _createClass(ElementIsNotSelectableError, null, [{
    key: 'code',
    value: function code() {
      return 15;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not selectable';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementIsNotSelectableError(err) {
    _classCallCheck(this, ElementIsNotSelectableError);

    _get(Object.getPrototypeOf(ElementIsNotSelectableError.prototype), 'constructor', this).call(this, err || 'An attempt was made to select an element that cannot be selected.', ElementIsNotSelectableError.code(), ElementIsNotSelectableError.w3cStatus(), ElementIsNotSelectableError.error());
  }

  return ElementIsNotSelectableError;
})(ProtocolError);

var ElementClickInterceptedError = (function (_ProtocolError12) {
  _inherits(ElementClickInterceptedError, _ProtocolError12);

  _createClass(ElementClickInterceptedError, null, [{
    key: 'code',
    value: function code() {
      return 64;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element click intercepted';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementClickInterceptedError(err) {
    _classCallCheck(this, ElementClickInterceptedError);

    _get(Object.getPrototypeOf(ElementClickInterceptedError.prototype), 'constructor', this).call(this, err || 'The Element Click command could not be completed because the element receiving ' + 'the events is obscuring the element that was requested clicked', ElementClickInterceptedError.code(), ElementClickInterceptedError.w3cStatus(), ElementClickInterceptedError.error());
  }

  return ElementClickInterceptedError;
})(ProtocolError);

var ElementNotInteractableError = (function (_ProtocolError13) {
  _inherits(ElementNotInteractableError, _ProtocolError13);

  _createClass(ElementNotInteractableError, null, [{
    key: 'code',
    value: function code() {
      return 60;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not interactable';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementNotInteractableError(err) {
    _classCallCheck(this, ElementNotInteractableError);

    _get(Object.getPrototypeOf(ElementNotInteractableError.prototype), 'constructor', this).call(this, err || 'A command could not be completed because the element is not pointer- or keyboard interactable', ElementNotInteractableError.code(), ElementNotInteractableError.w3cStatus(), ElementNotInteractableError.error());
  }

  return ElementNotInteractableError;
})(ProtocolError);

var InsecureCertificateError = (function (_ProtocolError14) {
  _inherits(InsecureCertificateError, _ProtocolError14);

  _createClass(InsecureCertificateError, null, [{
    key: 'error',
    value: function error() {
      return 'insecure certificate';
    }
  }]);

  function InsecureCertificateError(err) {
    _classCallCheck(this, InsecureCertificateError);

    _get(Object.getPrototypeOf(InsecureCertificateError.prototype), 'constructor', this).call(this, err || 'Navigation caused the user agent to hit a certificate warning, which is usually the result of an expired or invalid TLS certificate', ElementIsNotSelectableError.code(), null, InsecureCertificateError.error());
  }

  return InsecureCertificateError;
})(ProtocolError);

var JavaScriptError = (function (_ProtocolError15) {
  _inherits(JavaScriptError, _ProtocolError15);

  _createClass(JavaScriptError, null, [{
    key: 'code',
    value: function code() {
      return 17;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'javascript error';
    }
  }]);

  function JavaScriptError(err) {
    _classCallCheck(this, JavaScriptError);

    _get(Object.getPrototypeOf(JavaScriptError.prototype), 'constructor', this).call(this, err || 'An error occurred while executing user supplied JavaScript.', JavaScriptError.code(), JavaScriptError.w3cStatus(), JavaScriptError.error());
  }

  return JavaScriptError;
})(ProtocolError);

var XPathLookupError = (function (_ProtocolError16) {
  _inherits(XPathLookupError, _ProtocolError16);

  _createClass(XPathLookupError, null, [{
    key: 'code',
    value: function code() {
      return 19;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid selector';
    }
  }]);

  function XPathLookupError(err) {
    _classCallCheck(this, XPathLookupError);

    _get(Object.getPrototypeOf(XPathLookupError.prototype), 'constructor', this).call(this, err || 'An error occurred while searching for an element by XPath.', XPathLookupError.code(), XPathLookupError.w3cStatus(), XPathLookupError.error());
  }

  return XPathLookupError;
})(ProtocolError);

var TimeoutError = (function (_ProtocolError17) {
  _inherits(TimeoutError, _ProtocolError17);

  _createClass(TimeoutError, null, [{
    key: 'code',
    value: function code() {
      return 21;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].REQUEST_TIMEOUT;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'timeout';
    }
  }]);

  function TimeoutError(err) {
    _classCallCheck(this, TimeoutError);

    _get(Object.getPrototypeOf(TimeoutError.prototype), 'constructor', this).call(this, err || 'An operation did not complete before its timeout expired.', TimeoutError.code(), TimeoutError.w3cStatus(), TimeoutError.error());
  }

  return TimeoutError;
})(ProtocolError);

var NoSuchWindowError = (function (_ProtocolError18) {
  _inherits(NoSuchWindowError, _ProtocolError18);

  _createClass(NoSuchWindowError, null, [{
    key: 'code',
    value: function code() {
      return 23;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such window';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }]);

  function NoSuchWindowError(err) {
    _classCallCheck(this, NoSuchWindowError);

    _get(Object.getPrototypeOf(NoSuchWindowError.prototype), 'constructor', this).call(this, err || 'A request to switch to a different window could not be satisfied ' + 'because the window could not be found.', NoSuchWindowError.code(), NoSuchWindowError.w3cStatus(), NoSuchWindowError.error());
  }

  return NoSuchWindowError;
})(ProtocolError);

var InvalidArgumentError = (function (_ProtocolError19) {
  _inherits(InvalidArgumentError, _ProtocolError19);

  _createClass(InvalidArgumentError, null, [{
    key: 'code',
    value: function code() {
      return 61;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid argument';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function InvalidArgumentError(err) {
    _classCallCheck(this, InvalidArgumentError);

    _get(Object.getPrototypeOf(InvalidArgumentError.prototype), 'constructor', this).call(this, err || 'The arguments passed to the command are either invalid or malformed', InvalidArgumentError.code(), InvalidArgumentError.w3cStatus(), InvalidArgumentError.error());
  }

  return InvalidArgumentError;
})(ProtocolError);

var InvalidCookieDomainError = (function (_ProtocolError20) {
  _inherits(InvalidCookieDomainError, _ProtocolError20);

  _createClass(InvalidCookieDomainError, null, [{
    key: 'code',
    value: function code() {
      return 24;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid cookie domain';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function InvalidCookieDomainError(err) {
    _classCallCheck(this, InvalidCookieDomainError);

    _get(Object.getPrototypeOf(InvalidCookieDomainError.prototype), 'constructor', this).call(this, err || 'An illegal attempt was made to set a cookie under a different ' + 'domain than the current page.', InvalidCookieDomainError.code(), InvalidCookieDomainError.w3cStatus(), InvalidCookieDomainError.error());
  }

  return InvalidCookieDomainError;
})(ProtocolError);

var NoSuchCookieError = (function (_ProtocolError21) {
  _inherits(NoSuchCookieError, _ProtocolError21);

  _createClass(NoSuchCookieError, null, [{
    key: 'code',
    value: function code() {
      return 62;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such cookie';
    }
  }]);

  function NoSuchCookieError(err) {
    _classCallCheck(this, NoSuchCookieError);

    _get(Object.getPrototypeOf(NoSuchCookieError.prototype), 'constructor', this).call(this, err || 'No cookie matching the given path name was found amongst the associated cookies of the current browsing context’s active document', NoSuchCookieError.code(), NoSuchCookieError.w3cStatus(), NoSuchCookieError.error());
  }

  return NoSuchCookieError;
})(ProtocolError);

var UnableToSetCookieError = (function (_ProtocolError22) {
  _inherits(UnableToSetCookieError, _ProtocolError22);

  _createClass(UnableToSetCookieError, null, [{
    key: 'code',
    value: function code() {
      return 25;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unable to set cookie';
    }
  }]);

  function UnableToSetCookieError(err) {
    _classCallCheck(this, UnableToSetCookieError);

    _get(Object.getPrototypeOf(UnableToSetCookieError.prototype), 'constructor', this).call(this, err || 'A request to set a cookie\'s value could not be satisfied.', UnableToSetCookieError.code(), UnableToSetCookieError.w3cStatus(), UnableToSetCookieError.error());
  }

  return UnableToSetCookieError;
})(ProtocolError);

var UnexpectedAlertOpenError = (function (_ProtocolError23) {
  _inherits(UnexpectedAlertOpenError, _ProtocolError23);

  _createClass(UnexpectedAlertOpenError, null, [{
    key: 'code',
    value: function code() {
      return 26;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unexpected alert open';
    }
  }]);

  function UnexpectedAlertOpenError(err) {
    _classCallCheck(this, UnexpectedAlertOpenError);

    _get(Object.getPrototypeOf(UnexpectedAlertOpenError.prototype), 'constructor', this).call(this, err || 'A modal dialog was open, blocking this operation', UnexpectedAlertOpenError.code(), UnexpectedAlertOpenError.w3cStatus(), UnexpectedAlertOpenError.error());
  }

  return UnexpectedAlertOpenError;
})(ProtocolError);

var NoAlertOpenError = (function (_ProtocolError24) {
  _inherits(NoAlertOpenError, _ProtocolError24);

  _createClass(NoAlertOpenError, null, [{
    key: 'code',
    value: function code() {
      return 27;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such alert';
    }
  }]);

  function NoAlertOpenError(err) {
    _classCallCheck(this, NoAlertOpenError);

    _get(Object.getPrototypeOf(NoAlertOpenError.prototype), 'constructor', this).call(this, err || 'An attempt was made to operate on a modal dialog when one ' + 'was not open.', NoAlertOpenError.code(), NoAlertOpenError.w3cStatus(), NoAlertOpenError.error());
  }

  return NoAlertOpenError;
})(ProtocolError);

var NoSuchAlertError = (function (_NoAlertOpenError) {
  _inherits(NoSuchAlertError, _NoAlertOpenError);

  function NoSuchAlertError() {
    _classCallCheck(this, NoSuchAlertError);

    _get(Object.getPrototypeOf(NoSuchAlertError.prototype), 'constructor', this).apply(this, arguments);
  }

  return NoSuchAlertError;
})(NoAlertOpenError);

var ScriptTimeoutError = (function (_ProtocolError25) {
  _inherits(ScriptTimeoutError, _ProtocolError25);

  _createClass(ScriptTimeoutError, null, [{
    key: 'code',
    value: function code() {
      return 28;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].REQUEST_TIMEOUT;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'script timeout';
    }
  }]);

  function ScriptTimeoutError(err) {
    _classCallCheck(this, ScriptTimeoutError);

    _get(Object.getPrototypeOf(ScriptTimeoutError.prototype), 'constructor', this).call(this, err || 'A script did not complete before its timeout expired.', ScriptTimeoutError.code(), ScriptTimeoutError.w3cStatus(), ScriptTimeoutError.error());
  }

  return ScriptTimeoutError;
})(ProtocolError);

var InvalidElementCoordinatesError = (function (_ProtocolError26) {
  _inherits(InvalidElementCoordinatesError, _ProtocolError26);

  _createClass(InvalidElementCoordinatesError, null, [{
    key: 'code',
    value: function code() {
      return 29;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid coordinates';
    }
  }]);

  function InvalidElementCoordinatesError(err) {
    _classCallCheck(this, InvalidElementCoordinatesError);

    _get(Object.getPrototypeOf(InvalidElementCoordinatesError.prototype), 'constructor', this).call(this, err || 'The coordinates provided to an interactions operation are invalid.', InvalidElementCoordinatesError.code(), InvalidElementCoordinatesError.w3cStatus(), InvalidElementCoordinatesError.error());
  }

  return InvalidElementCoordinatesError;
})(ProtocolError);

var InvalidCoordinatesError = (function (_InvalidElementCoordinatesError) {
  _inherits(InvalidCoordinatesError, _InvalidElementCoordinatesError);

  function InvalidCoordinatesError() {
    _classCallCheck(this, InvalidCoordinatesError);

    _get(Object.getPrototypeOf(InvalidCoordinatesError.prototype), 'constructor', this).apply(this, arguments);
  }

  return InvalidCoordinatesError;
})(InvalidElementCoordinatesError);

var IMENotAvailableError = (function (_ProtocolError27) {
  _inherits(IMENotAvailableError, _ProtocolError27);

  _createClass(IMENotAvailableError, null, [{
    key: 'code',
    value: function code() {
      return 30;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function IMENotAvailableError(err) {
    _classCallCheck(this, IMENotAvailableError);

    _get(Object.getPrototypeOf(IMENotAvailableError.prototype), 'constructor', this).call(this, err || 'IME was not available.', IMENotAvailableError.code(), IMENotAvailableError.w3cStatus(), IMENotAvailableError.error());
  }

  return IMENotAvailableError;
})(ProtocolError);

var IMEEngineActivationFailedError = (function (_ProtocolError28) {
  _inherits(IMEEngineActivationFailedError, _ProtocolError28);

  _createClass(IMEEngineActivationFailedError, null, [{
    key: 'code',
    value: function code() {
      return 31;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function IMEEngineActivationFailedError(err) {
    _classCallCheck(this, IMEEngineActivationFailedError);

    _get(Object.getPrototypeOf(IMEEngineActivationFailedError.prototype), 'constructor', this).call(this, err || 'An IME engine could not be started.', IMEEngineActivationFailedError.code(), IMEEngineActivationFailedError.w3cStatus(), IMEEngineActivationFailedError.error());
  }

  return IMEEngineActivationFailedError;
})(ProtocolError);

var InvalidSelectorError = (function (_ProtocolError29) {
  _inherits(InvalidSelectorError, _ProtocolError29);

  _createClass(InvalidSelectorError, null, [{
    key: 'code',
    value: function code() {
      return 32;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid selector';
    }
  }]);

  function InvalidSelectorError(err) {
    _classCallCheck(this, InvalidSelectorError);

    _get(Object.getPrototypeOf(InvalidSelectorError.prototype), 'constructor', this).call(this, err || 'Argument was an invalid selector (e.g. XPath/CSS).', InvalidSelectorError.code(), InvalidSelectorError.w3cStatus(), InvalidSelectorError.error());
  }

  return InvalidSelectorError;
})(ProtocolError);

var SessionNotCreatedError = (function (_ProtocolError30) {
  _inherits(SessionNotCreatedError, _ProtocolError30);

  _createClass(SessionNotCreatedError, null, [{
    key: 'code',
    value: function code() {
      return 33;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'session not created';
    }
  }]);

  function SessionNotCreatedError(details) {
    _classCallCheck(this, SessionNotCreatedError);

    var message = 'A new session could not be created.';
    if (details) {
      message += ' Details: ' + details;
    }

    _get(Object.getPrototypeOf(SessionNotCreatedError.prototype), 'constructor', this).call(this, message, SessionNotCreatedError.code(), SessionNotCreatedError.w3cStatus(), SessionNotCreatedError.error());
  }

  return SessionNotCreatedError;
})(ProtocolError);

var MoveTargetOutOfBoundsError = (function (_ProtocolError31) {
  _inherits(MoveTargetOutOfBoundsError, _ProtocolError31);

  _createClass(MoveTargetOutOfBoundsError, null, [{
    key: 'code',
    value: function code() {
      return 34;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'move target out of bounds';
    }
  }]);

  function MoveTargetOutOfBoundsError(err) {
    _classCallCheck(this, MoveTargetOutOfBoundsError);

    _get(Object.getPrototypeOf(MoveTargetOutOfBoundsError.prototype), 'constructor', this).call(this, err || 'Target provided for a move action is out of bounds.', MoveTargetOutOfBoundsError.code(), MoveTargetOutOfBoundsError.w3cStatus(), MoveTargetOutOfBoundsError.error());
  }

  return MoveTargetOutOfBoundsError;
})(ProtocolError);

var NoSuchContextError = (function (_ProtocolError32) {
  _inherits(NoSuchContextError, _ProtocolError32);

  _createClass(NoSuchContextError, null, [{
    key: 'code',
    value: function code() {
      return 35;
    }
  }]);

  function NoSuchContextError(err) {
    _classCallCheck(this, NoSuchContextError);

    _get(Object.getPrototypeOf(NoSuchContextError.prototype), 'constructor', this).call(this, err || 'No such context found.', NoSuchContextError.code());
  }

  return NoSuchContextError;
})(ProtocolError);

var InvalidContextError = (function (_ProtocolError33) {
  _inherits(InvalidContextError, _ProtocolError33);

  _createClass(InvalidContextError, null, [{
    key: 'code',
    value: function code() {
      return 36;
    }
  }]);

  function InvalidContextError(err) {
    _classCallCheck(this, InvalidContextError);

    _get(Object.getPrototypeOf(InvalidContextError.prototype), 'constructor', this).call(this, err || 'That command could not be executed in the current context.', InvalidContextError.code());
  }

  // This is an alias for UnknownMethodError
  return InvalidContextError;
})(ProtocolError);

var NotYetImplementedError = (function (_ProtocolError34) {
  _inherits(NotYetImplementedError, _ProtocolError34);

  _createClass(NotYetImplementedError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND; // W3C equivalent is called 'Unknown Command' (A command could not be executed because the remote end is not aware of it)
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown method';
    }
  }]);

  function NotYetImplementedError(err) {
    _classCallCheck(this, NotYetImplementedError);

    _get(Object.getPrototypeOf(NotYetImplementedError.prototype), 'constructor', this).call(this, err || 'Method has not yet been implemented', NotYetImplementedError.code(), NotYetImplementedError.w3cStatus(), NotYetImplementedError.error());
  }

  return NotYetImplementedError;
})(ProtocolError);

var NotImplementedError = (function (_ProtocolError35) {
  _inherits(NotImplementedError, _ProtocolError35);

  _createClass(NotImplementedError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].METHOD_NOT_ALLOWED; // W3C equivalent is 'Unknown Method' (The requested command matched a known URL but did not match an method for that URL)
    }
  }]);

  function NotImplementedError(err) {
    _classCallCheck(this, NotImplementedError);

    _get(Object.getPrototypeOf(NotImplementedError.prototype), 'constructor', this).call(this, err || 'Method is not implemented', NotImplementedError.code(), NotImplementedError.w3cStatus());
  }

  return NotImplementedError;
})(ProtocolError);

var UnableToCaptureScreen = (function (_ProtocolError36) {
  _inherits(UnableToCaptureScreen, _ProtocolError36);

  _createClass(UnableToCaptureScreen, null, [{
    key: 'code',
    value: function code() {
      return 63;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unable to capture screen';
    }
  }]);

  function UnableToCaptureScreen(err) {
    _classCallCheck(this, UnableToCaptureScreen);

    _get(Object.getPrototypeOf(UnableToCaptureScreen.prototype), 'constructor', this).call(this, err || 'A screen capture was made impossible', UnableToCaptureScreen.code(), UnableToCaptureScreen.w3cStatus(), UnableToCaptureScreen.error());
  }

  // Equivalent to W3C InvalidArgumentError
  return UnableToCaptureScreen;
})(ProtocolError);

var BadParametersError = (function (_ES6Error2) {
  _inherits(BadParametersError, _ES6Error2);

  _createClass(BadParametersError, null, [{
    key: 'error',
    value: function error() {
      return 'invalid argument';
    }
  }]);

  function BadParametersError(requiredParams, actualParams, errMessage) {
    _classCallCheck(this, BadParametersError);

    var message = undefined;
    if (!errMessage) {
      message = 'Parameters were incorrect. We wanted ' + (JSON.stringify(requiredParams) + ' and you ') + ('sent ' + JSON.stringify(actualParams));
    } else {
      message = 'Parameters were incorrect. You sent ' + JSON.stringify(actualParams) + ', ' + errMessage;
    }
    _get(Object.getPrototypeOf(BadParametersError.prototype), 'constructor', this).call(this, message);
    this.w3cStatus = _httpStatusCodes2['default'].BAD_REQUEST;
  }

  /**
   * ProxyRequestError is a custom error and will be thrown up on unsuccessful proxy request and
   * will contain information about the proxy failure.
   * In case of ProxyRequestError should fetch the actual error by calling `getActualError()`
   * for proxy failure to generate the client response.
   */
  return BadParametersError;
})(_es6Error2['default']);

var ProxyRequestError = (function (_ES6Error3) {
  _inherits(ProxyRequestError, _ES6Error3);

  function ProxyRequestError(err, responseError, httpStatus) {
    _classCallCheck(this, ProxyRequestError);

    var responseErrorObj = _appiumSupport.util.safeJsonParse(responseError);
    if (!_lodash2['default'].isPlainObject(responseErrorObj)) {
      responseErrorObj = {};
    }
    var origMessage = _lodash2['default'].isString(responseError) ? responseError : '';
    if (!_lodash2['default'].isEmpty(responseErrorObj)) {
      if (_lodash2['default'].isString(responseErrorObj.value)) {
        origMessage = responseErrorObj.value;
      } else if (_lodash2['default'].isPlainObject(responseErrorObj.value) && _lodash2['default'].isString(responseErrorObj.value.message)) {
        origMessage = responseErrorObj.value.message;
      }
    }
    _get(Object.getPrototypeOf(ProxyRequestError.prototype), 'constructor', this).call(this, _lodash2['default'].isEmpty(err) ? 'Proxy request unsuccessful. ' + origMessage : err);

    this.w3cStatus = _httpStatusCodes2['default'].BAD_REQUEST;

    // If the response error is an object and value is an object, it's a W3C error (for JSONWP value is a string)
    if (_lodash2['default'].isPlainObject(responseErrorObj.value) && _lodash2['default'].has(responseErrorObj.value, 'error')) {
      this.w3c = responseErrorObj.value;
      this.w3cStatus = httpStatus || _httpStatusCodes2['default'].BAD_REQUEST;
    } else {
      this.jsonwp = responseErrorObj;
    }
  }

  // map of error class name to error class

  _createClass(ProxyRequestError, [{
    key: 'getActualError',
    value: function getActualError() {
      // If it's MJSONWP error, returns actual error cause for request failure based on `jsonwp.status`
      if (_appiumSupport.util.hasValue(this.jsonwp) && _appiumSupport.util.hasValue(this.jsonwp.status) && _appiumSupport.util.hasValue(this.jsonwp.value)) {
        return errorFromMJSONWPStatusCode(this.jsonwp.status, this.jsonwp.value);
      } else if (_appiumSupport.util.hasValue(this.w3c) && _lodash2['default'].isNumber(this.w3cStatus) && this.w3cStatus >= 300) {
        return errorFromW3CJsonCode(this.w3c.error, this.w3c.message || this.message, this.w3c.stacktrace);
      }
      return new UnknownError(this.message);
    }
  }]);

  return ProxyRequestError;
})(_es6Error2['default']);

var errors = { NotYetImplementedError: NotYetImplementedError,
  NotImplementedError: NotImplementedError,
  BadParametersError: BadParametersError,
  InvalidArgumentError: InvalidArgumentError,
  NoSuchDriverError: NoSuchDriverError,
  NoSuchElementError: NoSuchElementError,
  UnknownCommandError: UnknownCommandError,
  StaleElementReferenceError: StaleElementReferenceError,
  ElementNotVisibleError: ElementNotVisibleError,
  InvalidElementStateError: InvalidElementStateError,
  UnknownError: UnknownError,
  ElementIsNotSelectableError: ElementIsNotSelectableError,
  ElementClickInterceptedError: ElementClickInterceptedError,
  ElementNotInteractableError: ElementNotInteractableError,
  InsecureCertificateError: InsecureCertificateError,
  JavaScriptError: JavaScriptError,
  XPathLookupError: XPathLookupError,
  TimeoutError: TimeoutError,
  NoSuchWindowError: NoSuchWindowError,
  NoSuchCookieError: NoSuchCookieError,
  InvalidCookieDomainError: InvalidCookieDomainError,
  InvalidCoordinatesError: InvalidCoordinatesError,
  UnableToSetCookieError: UnableToSetCookieError,
  UnexpectedAlertOpenError: UnexpectedAlertOpenError,
  NoAlertOpenError: NoAlertOpenError,
  ScriptTimeoutError: ScriptTimeoutError,
  InvalidElementCoordinatesError: InvalidElementCoordinatesError,
  IMENotAvailableError: IMENotAvailableError,
  IMEEngineActivationFailedError: IMEEngineActivationFailedError,
  InvalidSelectorError: InvalidSelectorError,
  SessionNotCreatedError: SessionNotCreatedError,
  MoveTargetOutOfBoundsError: MoveTargetOutOfBoundsError,
  NoSuchAlertError: NoSuchAlertError,
  NoSuchContextError: NoSuchContextError,
  InvalidContextError: InvalidContextError,
  NoSuchFrameError: NoSuchFrameError,
  UnableToCaptureScreen: UnableToCaptureScreen,
  UnknownMethodError: UnknownMethodError,
  UnsupportedOperationError: UnsupportedOperationError,
  ProxyRequestError: ProxyRequestError };

// map of error code to error class
var jsonwpErrorCodeMap = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].values(errors)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var ErrorClass = _step.value;

    if (ErrorClass.code) {
      jsonwpErrorCodeMap[ErrorClass.code()] = ErrorClass;
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var w3cErrorCodeMap = {};
var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _getIterator(_lodash2['default'].values(errors)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var ErrorClass = _step2.value;

    if (ErrorClass.error) {
      w3cErrorCodeMap[ErrorClass.error()] = ErrorClass;
    }
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

function isErrorType(err, type) {
  // `name` property is the constructor name
  if (type.name === ProtocolError.name) {
    // `jsonwpCode` is `0` on success
    return !!err.jsonwpCode;
  } else if (type.name === ProxyRequestError.name) {
    // `status` is `0` on success
    if (err.jsonwp) {
      return !!err.jsonwp.status;
    }

    if (_lodash2['default'].isPlainObject(err.w3c)) {
      return _lodash2['default'].isNumber(err.w3cStatus) && err.w3cStatus >= 300;
    }

    return false;
  }
  return err.constructor.name === type.name;
}

/**
 * Retrieve an error derived from MJSONWP status
 * @param {number} code JSONWP status code
 * @param {string} message The error message
 * @return {ProtocolError} The error that is associated with provided JSONWP status code
 */
function errorFromMJSONWPStatusCode(code, message) {
  if (code !== UnknownError.code() && jsonwpErrorCodeMap[code]) {
    mjsonwpLog.debug('Matched JSONWP error code ' + code + ' to ' + jsonwpErrorCodeMap[code].name);
    return new jsonwpErrorCodeMap[code](message);
  }
  mjsonwpLog.debug('Matched JSONWP error code ' + code + ' to UnknownError');
  return new UnknownError(message);
}

/**
 * Retrieve an error derived from W3C JSON Code
 * @param {string} code W3C error string (see https://www.w3.org/TR/webdriver/#handling-errors `JSON Error Code` column)
 * @param {string} message the error message
 * @param {?string} stacktrace an optional error stacktrace
 * @return {ProtocolError}  The error that is associated with the W3C error string
 */
function errorFromW3CJsonCode(code, message) {
  var stacktrace = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  if (code && w3cErrorCodeMap[code.toLowerCase()]) {
    w3cLog.debug('Matched W3C error code \'' + code + '\' to ' + w3cErrorCodeMap[code.toLowerCase()].name);
    var _resultError = new (w3cErrorCodeMap[code.toLowerCase()])(message);
    _resultError.stacktrace = stacktrace;
    return _resultError;
  }
  w3cLog.debug('Matched W3C error code \'' + code + '\' to UnknownError');
  var resultError = new UnknownError(message);
  resultError.stacktrace = stacktrace;
  return resultError;
}

/**
 * Convert an Appium error to proper W3C HTTP response
 * @param {ProtocolError} err The error that needs to be translated
 */
function getResponseForW3CError(err) {
  var httpStatus = undefined;

  // W3C defined error message (https://www.w3.org/TR/webdriver/#dfn-error-code)
  var w3cErrorString = undefined;

  if (!err.w3cStatus) {
    if (_appiumSupport.util.hasValue(err.status)) {
      // If it's a JSONWP error, find corresponding error
      err = errorFromMJSONWPStatusCode(err.status, err.value);
    } else {
      w3cLog.error('Encountered internal error running command: ' + err.stack);
      err = new errors.UnknownError(err.message);
    }
  }

  if (isErrorType(err, errors.BadParametersError)) {
    // respond with a 400 if we have bad parameters
    w3cLog.debug('Bad parameters: ' + err);
    w3cErrorString = BadParametersError.error();
  } else {
    w3cErrorString = err.error;
  }

  httpStatus = err.w3cStatus;

  if (!w3cErrorString) {
    w3cErrorString = UnknownError.error();
  }

  var httpResBody = {
    value: {
      error: w3cErrorString,
      message: err.message,
      stacktrace: err.stacktrace || err.stack
    }
  };
  return [httpStatus, httpResBody];
}

/**
 * Convert an Appium error to a proper JSONWP response
 * @param {ProtocolError} err The error to be converted
 */
function getResponseForJsonwpError(err) {
  // MJSONWP errors are usually 500 status code so set it to that by default
  var httpStatus = _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
  var httpResBody = {
    status: err.jsonwpCode,
    value: {
      message: err.message
    }
  };

  if (isErrorType(err, errors.BadParametersError)) {
    // respond with a 400 if we have bad parameters
    mjsonwpLog.debug('Bad parameters: ' + err);
    httpStatus = _httpStatusCodes2['default'].BAD_REQUEST;
    httpResBody = err.message;
  } else if (isErrorType(err, errors.NotYetImplementedError) || isErrorType(err, errors.NotImplementedError)) {
    // respond with a 501 if the method is not implemented
    httpStatus = _httpStatusCodes2['default'].NOT_IMPLEMENTED;
  } else if (isErrorType(err, errors.NoSuchDriverError)) {
    // respond with a 404 if there is no driver for the session
    httpStatus = _httpStatusCodes2['default'].NOT_FOUND;
  }

  return [httpStatus, httpResBody];
}

exports.ProtocolError = ProtocolError;
exports.errors = errors;
exports.isErrorType = isErrorType;
exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.getResponseForW3CError = getResponseForW3CError;
exports.getResponseForJsonwpError = getResponseForJsonwpError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
