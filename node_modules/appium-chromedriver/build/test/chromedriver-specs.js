'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libChromedriver = require('../lib/chromedriver');

var _libInstall = require('../lib/install');

var install = _interopRequireWildcard(_libInstall);

var _libUtils = require('../lib/utils');

var utils = _interopRequireWildcard(_libUtils);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();

describe('chromedriver', function () {
  var sandbox = undefined;
  beforeEach(function () {
    sandbox = _sinon2['default'].createSandbox();
  });
  afterEach(function () {
    sandbox.restore();
  });

  describe('getCompatibleChromedriver', function () {
    describe('desktop', function () {
      it('should find generic binary', function callee$3$0() {
        var cd, binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(utils, 'getChromedriverBinaryPath').returns('/path/to/chromedriver');

              cd = new _libChromedriver.Chromedriver({});
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 4:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver');

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('Android', function () {
      var cd = undefined;
      var getChromedriverBinaryPathSpy = undefined;
      before(function () {
        cd = new _libChromedriver.Chromedriver({
          adb: {
            getApiLevel: function getApiLevel() {
              return 25;
            }
          }
        });
      });
      beforeEach(function () {
        getChromedriverBinaryPathSpy = sandbox.spy(install, 'getChromedriverBinaryPath');
      });
      afterEach(function () {
        getChromedriverBinaryPathSpy.called.should.be['false'];
      });

      it('should find a compatible binary if only one binary exists', function callee$3$0() {
        var binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(utils, 'getChromeVersion').returns('63.0.3239.99');
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver']);
              sandbox.stub(tp, 'exec').returns({
                stdout: 'ChromeDriver 2.36.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 5:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver');

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should find most recent compatible binary from a number of possibilities', function callee$3$0() {
        var binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(utils, 'getChromeVersion').returns('59.0.3029.42');
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver-36', '/path/to/chromedriver-35', '/path/to/chromedriver-34', '/path/to/chromedriver-33', '/path/to/chromedriver-32', '/path/to/chromedriver-31', '/path/to/chromedriver-30']);
              sandbox.stub(tp, 'exec').onCall(0).returns({
                stdout: 'ChromeDriver 2.36.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.35.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.34.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.33.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.32.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.31.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.30.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 5:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver-36');

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should correctly determine Chromedriver versions', function callee$3$0() {
        var chromedrivers, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, _cd, expectedVersion;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver-36', '/path/to/chromedriver-35', '/path/to/chromedriver-34', '/path/to/chromedriver-33', '/path/to/chromedriver-32', '/path/to/chromedriver-31', '/path/to/chromedriver-30']);
              sandbox.stub(tp, 'exec').onCall(0).returns({
                stdout: 'ChromeDriver 2.36.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(1).returns({
                stdout: 'ChromeDriver 2.35.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(2).returns({
                stdout: 'ChromeDriver 2.34.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(3).returns({
                stdout: 'ChromeDriver 2.33.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(4).returns({
                stdout: 'ChromeDriver 2.32.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(5).returns({
                stdout: 'ChromeDriver 2.31.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(6).returns({
                stdout: 'ChromeDriver 2.30.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(cd.getChromedrivers({}));

            case 4:
              chromedrivers = context$4$0.sent;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              context$4$0.prev = 8;

              for (_iterator = _getIterator(_lodash2['default'].zip(chromedrivers, ['2.36', '2.35', '2.34', '2.33', '2.32', '2.31', '2.30'])); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                _step$value = _slicedToArray(_step.value, 2);
                _cd = _step$value[0];
                expectedVersion = _step$value[1];

                _cd.version.should.eql(expectedVersion);
              }
              context$4$0.next = 16;
              break;

            case 12:
              context$4$0.prev = 12;
              context$4$0.t0 = context$4$0['catch'](8);
              _didIteratorError = true;
              _iteratorError = context$4$0.t0;

            case 16:
              context$4$0.prev = 16;
              context$4$0.prev = 17;

              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }

            case 19:
              context$4$0.prev = 19;

              if (!_didIteratorError) {
                context$4$0.next = 22;
                break;
              }

              throw _iteratorError;

            case 22:
              return context$4$0.finish(19);

            case 23:
              return context$4$0.finish(16);

            case 24:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
      });

      it('should find most recent binary from a number of possibilities when chrome is too new', function callee$3$0() {
        var binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(utils, 'getChromeVersion').returns('70.0.0.42');
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver-9000', '/path/to/chromedriver-8999', '/path/to/chromedriver-36', '/path/to/chromedriver-35']);
              sandbox.stub(tp, 'exec').onCall(0).returns({
                stdout: 'ChromeDriver 2.9000.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.8999.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.36.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              }).onCall(0).returns({
                stdout: 'ChromeDriver 2.35.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 5:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver-9000');

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should search specified directory if provided', function callee$3$0() {
        var cd, binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              cd = new _libChromedriver.Chromedriver({
                adb: {
                  getApiLevel: function getApiLevel() {
                    return 25;
                  }
                },
                executableDir: '/some/local/dir/for/chromedrivers'
              });

              sandbox.stub(utils, 'getChromeVersion').returns('63.0.3239.99');
              sandbox.stub(_appiumSupport.fs, 'glob').withArgs('/some/local/dir/for/chromedrivers/*').returns(['/some/local/dir/for/chromedrivers/chromedriver']);
              sandbox.stub(tp, 'exec').returns({
                stdout: 'ChromeDriver 2.36.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 6:
              binPath = context$4$0.sent;

              binPath.should.eql('/some/local/dir/for/chromedrivers/chromedriver');

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should use alternative mapping if provided', function callee$3$0() {
        var cd, binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              cd = new _libChromedriver.Chromedriver({
                adb: {
                  getApiLevel: function getApiLevel() {
                    return 25;
                  }
                },
                mappingPath: _path2['default'].resolve(__dirname, '..', '..', 'test', 'fixtures', 'alt-mapping.json')
              });

              sandbox.stub(utils, 'getChromeVersion').returns('63.0.3239.99');
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver-42']);
              sandbox.stub(tp, 'exec').returns({
                stdout: 'ChromeDriver 2.42.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 6:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver-42');

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should use alternative mapping if provided even if semver is broken', function callee$3$0() {
        var cd, binPath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              cd = new _libChromedriver.Chromedriver({
                adb: {
                  getApiLevel: function getApiLevel() {
                    return 25;
                  }
                },
                mappingPath: _path2['default'].resolve(__dirname, '..', '..', 'test', 'fixtures', 'alt-mapping-nonsemver.json')
              });

              sandbox.stub(utils, 'getChromeVersion').returns('63.0.3239.99');
              sandbox.stub(_appiumSupport.fs, 'glob').returns(['/path/to/chromedriver-42']);
              sandbox.stub(tp, 'exec').returns({
                stdout: 'ChromeDriver 2.42.540469 (1881fd7f8641508feb5166b7cae561d87723cfa8)'
              });

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(cd.getCompatibleChromedriver());

            case 6:
              binPath = context$4$0.sent;

              binPath.should.eql('/path/to/chromedriver-42');

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });

  describe('getMostRecentChromedriver', function () {
    it('should get a value by default', function () {
      (0, _libChromedriver.getMostRecentChromedriver)().should.be.a.string;
    });
    it('should get the most recent version', function () {
      var mapping = {
        '2.12': '36.0.1985',
        '2.11': '36.0.1985',
        '2.10': '33.0.1751',
        '2.9': '31.0.1650',
        '2.8': '30.0.1573',
        '2.7': '30.0.1573',
        '2.6': '29.0.1545'
      };
      (0, _libChromedriver.getMostRecentChromedriver)(mapping).should.eql('2.12');
    });
    it('should handle broken semver', function () {
      var mapping = {
        '2.12': '36.0.1985',
        'v2.11': '36.0.1985',
        '2.10.0.0': '33.0.1751',
        '2.9-beta': '31.0.1650',
        '2.8': '30.0.1573',
        '2.7': '30.0.1573',
        '2.6': '29.0.1545'
      };
      (0, _libChromedriver.getMostRecentChromedriver)(mapping).should.eql('2.12');
    });
    it('should fail for empty mapping', function () {
      (function () {
        return (0, _libChromedriver.getMostRecentChromedriver)({});
      }).should['throw']('Unable to get most recent Chromedriver from empty mapping');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
