// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('UiAutomator', function () {
  var uiAutomator = undefined,
      adb = new _appiumAdb2['default']();
  var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '../..' : '../../..');
  var bootstrapJar = _path2['default'].resolve(rootDir, 'test', 'fixtures', 'AppiumBootstrap.jar'),
      bootstrapClassName = 'io.appium.android.bootstrap.Bootstrap';
  before(function () {
    uiAutomator = new _2['default'](adb);
  });

  it('should throw an error if adb is not passed', function () {
    (function () {
      new _2['default']();
    }).should['throw'](/adb is required/);
  });
  it("parseJarNameFromPath should parse jarName from path and windows path", function () {
    uiAutomator.parseJarNameFromPath(bootstrapJar).should.equal('AppiumBootstrap.jar');
    var windowsJarName = 'C:\\\\appium\\bar.jar';
    uiAutomator.parseJarNameFromPath(windowsJarName).should.equal('bar.jar');
  });
  it("parseJarNameFromPath should throw error for invalid path", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          (function () {
            uiAutomator.parseJarNameFromPath('foo/bar');
          }).should['throw'](/Unable to parse/);

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  describe("start", (0, _appiumTestSupport.withSandbox)({ mocks: { adb: adb, teen_process: teen_process } }, function (S) {
    it("should return a subProcess", function callee$2$0() {
      var conn, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            conn = new _events2['default'].EventEmitter();

            conn.start = function () {};
            args = ["-P", 5037, "shell", "uiautomator", "runtest", 'AppiumBootstrap.jar', "-c", bootstrapClassName];

            S.mocks.adb.expects('push').once().withExactArgs(bootstrapJar, "/data/local/tmp/").returns('');
            S.mocks.adb.expects('getAdbPath').once().returns('adbPath');
            S.mocks.teen_process.expects("SubProcess").once().withExactArgs('adbPath', args).returns(conn);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(uiAutomator.start(bootstrapJar, bootstrapClassName));

          case 8:
            uiAutomator.state.should.equal('online');
            S.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe("shutdown", (0, _appiumTestSupport.withSandbox)({ mocks: { adb: adb, teen_process: teen_process } }, function (S) {
    it("should not fail if it is already stopped", function callee$2$0() {
      var conn, mock;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            conn = new _events2['default'].EventEmitter();

            conn.start = function () {};
            conn.stop = function () {};
            mock = _sinon2['default'].mock(conn);

            // It should NOT stop the process when shutting down, because it is already stopped
            mock.expects("stop").atMost(0);
            uiAutomator.proc = conn;

            // simulate uiAutomator unexpectedly terminates
            uiAutomator.changeState('stopped');
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(uiAutomator.shutdown());

          case 9:
            uiAutomator.state.should.equal('stopped');
            S.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it("should stop the uiautomator process", function callee$2$0() {
      var conn, mock;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            conn = new _events2['default'].EventEmitter();

            conn.start = function () {};
            conn.stop = function () {};
            mock = _sinon2['default'].mock(conn);

            // It should stop the process when shutting down
            mock.expects("stop").once();
            uiAutomator.proc = conn;
            uiAutomator.changeState('online');
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(uiAutomator.shutdown());

          case 9:
            uiAutomator.state.should.equal('stopped');
            S.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
